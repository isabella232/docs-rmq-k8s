---
title: Installing and Configuring Using CNAB
owner: RMQ for k8s
---

<strong><%= modified_date %></strong>

This topic describes how to install and configure <%= vars.product_full %>
using Cloud Native Application Bundle (CNAB).

There are two methods to install <%= vars.product_short %>. Use one of the following:

* **Kubernetes Manifests:** The Kubernetes manifest method requires manually editing YAML
  but is more flexible than the CNAB method.
  Pivotal recommends this method for advanced users.
  For instructions, see [Installing and Configuring Using Kubernetes Manifests](./installing.html).
* **CNAB:** The CNAB method, documented below, uses CNAB to automate the installation process.
  For information about CNAB, see [Cloud Native Application Bundle](https://cnab.io).

## <a id='prerequisites'></a> Prerequisites

Before you install and configure <%= vars.product_short %>, you must install and configure:

1. **kubectl:** For installation instructions,
see [the Kubernetes documentation](https://kubernetes.io/docs/tasks/tools/install-kubectl/).

1. **The Docker CLI:** For installation instructions,
see the [Docker documentation](https://docs.docker.com/install/).

1. **Duffle:** Install v0.3.3-beta.1 or later. For installation instructions, see
[duffle](https://github.com/deislabs/duffle) on GitHub.

1. **A Kubernetes cluster:** You must use Kubernetes v1.14 or later. A default storageClass has to be configured
or you need to specify which storageClass to use.

1. **A private image registry:** Pivotal recommends that you keep the CNAB, Kubernetes Operator, and
service broker images private even if your repository is publicly accessible.
If you do not have access to a private image registry, email the team at
rabbitmq-for-k8s@pivotal.io for help.

## <a id='overview'></a> Overview

To install and configure <%= vars.product_short %>:

1. [Download and Import <%= vars.product_full %>](#import)
1. [Configure Kubernetes Cluster Access to your Private Image Registry](#generate-credentials)
1. [Move the Images](#relocate-images)
1. [Install the CNAB Bundle](#install)
1. [(Optional) Register the Service Broker with Cloud Foundry](#register)
1. [(Optional) Configure the Kubernetes Operator](#configure)

## <a id='import'></a>Download and Import <%= vars.product_full %>

To download and import <%= vars.product_short %>:

1. Log in to your Early Access user account on [Pivotal Network](https://login.run.pivotal.io/login).
If you do not have an Early Access account, apply for one through the
[application form](https://pivotal.io/pivotal-rabbitmq-on-kubernetes).
<%= vars.product_short %> is currently only available to Early Access users.

1. Download the **<%= vars.product_full %> CNAB** artifact from
[Pivotal Network](https://network.pivotal.io/products/p-rabbitmq-for-kubernetes/).

    <p class="note">
      <strong>Note:</strong> You do not need to download the <strong><%= vars.product_full %></strong> artifact.
      It is used for <a href="./installing.html">Installing and Configuring Using Kubernetes Manifests</a>.
    </p>

1. Set a version variable by running:

    ```
    export version=NUMBER-build.NUMBER
    ```

    Where `NUMBER` is the CNAB artifact version listed in the name of the artifact file you downloaded.

    For example:

    ```
    export version=0.4.0-build.32
    ```

1. Extract the tarball that you downloaded to gain access to `bundle.json` by running:

    ```
    duffle import rabbitmq-for-kubernetes-cnab-$version.tgz
    ```

## <a id='generate-credentials'></a>Configure Kubernetes Cluster Access to your Private Image Registry

To generate credentials to grant the Kubernetes cluster access to images in your private image registry:

1. Run:

    ```
    duffle credentials generate rabbitmq-creds \
     -f rabbitmq-for-kubernetes-cnab-$version/bundle.json
    ```

    <p class="note">
      <strong>Note:</strong> For more options on how to generate duffle credentials, run
      <code>duffle credentials --help</code>.
    </p>

1. When prompted, enter:
    * The absolute path to the kubeconfig that points to your target Kubernetes cluster
    * The URL for the docker registry server
    * The docker registry username and password

## <a id='relocate-images'></a>Move the Images

To move the images to your private image registry:

1. Run:

    ```
    duffle relocate rabbitmq-for-kubernetes-cnab-$version.tgz -f \
      --repository-prefix=REGISTRY-HOST/ACCOUNT-NAME \
      --relocation-mapping=relmap.json
    ```

    Where:
    * `REGISTRY-HOST` is the hostname for your private image registry
    * `ACCOUNT-NAME` is the account name of your private image registry

    For example:

    <pre class="terminal">
      $ duffle relocate -f rabbitmq-for-kubernetes-cnab-0.4.0-build.32.tgz \
        --repository-prefix=eu.gcr.io/my-account \
        --relocation-mapping=relmap.json
      writing registry.pivotal.io/p-rabbitmq-for-kubernetes-staging/rabbitmq-for-kubernetes-cnab@sha256:550991eea3412ff9360adf2cf157bee6bfe935bb48923e920fb9366d6e42d6a2 to eu.gcr.io/my-account/p-rabbitmq-for-kubernetes-staging-rabbitmq-for-kubernetes-cnab-0839b8b2055a4de05b31712c67e2eb52@sha256:550991eea3412ff9360adf2cf157bee6bfe935bb48923e920fb9366d6e42d6a2
      writing registry.pivotal.io/p-rabbitmq-for-kubernetes-staging/rabbitmq@sha256:6709cafde00784361b231f6c94b6dbecb8fefd3d3195676ed81823e007e37449 to eu.gcr.io/my-account/p-rabbitmq-for-kubernetes-staging-rabbitmq-228ecdc119f602d199fa39cc0326057e@sha256:6709cafde00784361b231f6c94b6dbecb8fefd3d3195676ed81823e007e37449
      writing registry.pivotal.io/p-rabbitmq-for-kubernetes-staging/rabbitmq-for-kubernetes-operator@sha256:25c5b9693c6b23f3f18f91dd43a13c20d60210d47efe239c151d801c59575979 to eu.gcr.io/my-account/p-rabbitmq-for-kubernetes-staging-rabbitmq-for-kubernetes-operator-6cce6b962354fbbcdcc03a91055eb7d3@sha256:25c5b9693c6b23f3f18f91dd43a13c20d60210d47efe239c151d801c59575979
      writing registry.pivotal.io/p-rabbitmq-for-kubernetes-staging/rabbitmq-for-kubernetes-servicebroker@sha256:a36eb92cf2152c13c9cb420bc46722c8499d2b1bcdf0f84bb1549c6b93e83822 to eu.gcr.io/my-account/p-rabbitmq-for-kubernetes-staging-rabbitmq-for-kubernetes-servicebroker-180ccfcfb779e0c8b093dd44ae168157@sha256:a36eb92cf2152c13c9cb420bc46722c8499d2b1bcdf0f84bb1549c6b93e83822
    </pre>

    <p class="note">
      <strong>Note:</strong> <code>--relocation-mapping</code> specifies the name of the file that is created
      to store relocation mappings.
    </p>

## <a id='install'></a>Install the CNAB Bundle

To install the CNAB bundle:

1. Run any kubectl command that connects with the Kubernetes cluster to check that your Kubernetes authentication
token has not expired.<br><br>

    For example:

    ```
    kubectl get nodes
    ```

    If the authentication token has expired, an error message appears when you run the command in the next step.

1. Run:

    ```
    duffle install rabbitmq rabbitmq-for-kubernetes-cnab-$version.tgz -f \
      --relocation-mapping=relmap.json \
      --credentials rabbitmq-creds \
      --set broker_username=BROKER-USERNAME \
      --set broker_password=BROKER-PASSWORD
    ```

    Where:
    * `BROKER-USERNAME` is a username you specify for your service broker
    * `BROKER-PASSWORD` is a password you specify for your service broker

    For example:

    <pre class="terminal">
      $ duffle install rabbitmq rabbitmq-for-kubernetes-0.4.0-build.32.tgz -f \
        --relocation-mapping=relmap.json \
        --credentials rabbitmq-creds \
        --set broker_username=user1 \
        --set broker_password=example-password \
      Executing install action...
      + action=install
      + name=rabbitmq
      + case ${action} in
      + kubectl apply -f /cnab/app/manifests/namespace.yaml
      namespace/pivotal-rabbitmq-system created
      + [[ -n _json_key ]]
      + [[ -n {
        "type": "service_account",
        "project_id": "my-account",
        "private_key_id": "abc123",
        "private_key": "-----BEGIN PRIVATE KEY----- ... -----END PRIVATE KEY-----\n",
        "client_email": "gcr@my-account.iam.gserviceaccount.com",
        "client_id": "1234",
        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
        "token_uri": "https://oauth2.googleapis.com/token",
        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/gcr%40my-account.iam.gserviceaccount.com"
      }
      ]]
      + echo 'Creating Registry Secret'
      Creating Registry Secret
      + kubectl -n pivotal-rabbitmq-system create secret docker-registry p-rmq-registry-access --docker-server=eu.gcr.io/my-account --docker-username=_json_key '--docker-password={
        "type": "service_account",
        "project_id": "my-account",
        "private_key_id": "abc1234",
        "private_key": "-----BEGIN PRIVATE KEY----- ... -----END PRIVATE KEY-----\n",
        "client_email": "gcr@my-account.iam.gserviceaccount.com",
        "client_id": "1234",
        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
        "token_uri": "https://oauth2.googleapis.com/token",
        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/gcr%40my-account.iam.gserviceaccount.com"
      }
      '
      secret/p-rmq-registry-access created
      + echo 'Installing RabbitMQ for Kubernetes Operator'
      + bash /cnab/app/install_operator
      Installing RabbitMQ for Kubernetes Operator

      ---
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: p-rmq-operator-config
        namespace: pivotal-rabbitmq-system
      data:
        config: |
          service:
            type: ""
            annotations:

          persistence:
            storageClassName:
            storage:
          image: eu.gcr.io/my-account/p-rabbitmq-for-kubernetes-staging-rabbitmq-228ecdc119f602d199fa39cc0326057e@sha256:6709cafde00784361b231f6c94b6dbecb8fefd3d3195676ed81823e007e37449
          imagePullSecret: p-rmq-registry-access
      configmap/p-rmq-operator-config created
      customresourcedefinition.apiextensions.k8s.io/rabbitmqclusters.rabbitmq.pivotal.io created
      Changes

      Namespace                Name                        Kind                Conds.  Age  Op      Wait to    Rs  Ri
      -                        p-rmq-operator-role         ClusterRole         -       -    create  reconcile  -   -
      ~                        p-rmq-operator-rolebinding  ClusterRoleBinding  -       -    create  reconcile  -   -
      pivotal-rabbitmq-system  p-rmq-operator              Deployment          -       -    create  reconcile  -   -

      Op:      3 create, 0 delete, 0 update, 0 noop
      Wait to: 3 reconcile, 0 delete, 0 noop

      12:02:28PM: ---- applying 3 changes [0/3 done] ----
      12:02:28PM: create clusterrole/p-rmq-operator-role (rbac.authorization.k8s.io/v1) cluster
      12:02:28PM: create clusterrolebinding/p-rmq-operator-rolebinding (rbac.authorization.k8s.io/v1) cluster
      12:02:28PM: create deployment/p-rmq-operator (apps/v1) namespace: pivotal-rabbitmq-system
      12:02:28PM: ---- waiting on 3 changes [0/3 done] ----
      12:02:28PM: ok: reconcile clusterrole/p-rmq-operator-role (rbac.authorization.k8s.io/v1) cluster
      12:02:28PM: ok: reconcile clusterrolebinding/p-rmq-operator-rolebinding (rbac.authorization.k8s.io/v1) cluster
      12:02:28PM: ongoing: reconcile deployment/p-rmq-operator (apps/v1) namespace: pivotal-rabbitmq-system
      12:02:28PM:  ^ Waiting for 1 unavailable replicas
      12:02:28PM:  L ok: waiting on replicaset/p-rmq-operator-6c5b99ccd4 (apps/v1) namespace: pivotal-rabbitmq-system
      12:02:28PM:  L ongoing: waiting on pod/p-rmq-operator-6c5b99ccd4-jds84 (v1) namespace: pivotal-rabbitmq-system
      12:02:28PM:     ^ Pending: ContainerCreating
      12:02:28PM: ---- waiting on 1 changes [2/3 done] ----
      12:02:38PM: ok: reconcile deployment/p-rmq-operator (apps/v1) namespace: pivotal-rabbitmq-system
      12:02:38PM: ---- applying complete [3/3 done] ----
      12:02:38PM: ---- waiting complete [3/3 done] ----

      Succeeded
      + echo 'Installing RabbitMQ for Kubernetes Broker'
      + bash /cnab/app/install_broker
      Installing RabbitMQ for Kubernetes Broker
      secret/p-rmq-servicebroker-admin created
      Changes

      Namespace                Name                             Kind                Conds.  Age  Op      Wait to    Rs  Ri
      -                        p-rmq-servicebroker-role         ClusterRole         -       -    create  reconcile  -   -
      ~                        p-rmq-servicebroker-rolebinding  ClusterRoleBinding  -       -    create  reconcile  -   -
      pivotal-rabbitmq-system  p-rmq-servicebroker              Deployment          -       -    create  reconcile  -   -
      ~                        p-rmq-servicebroker-ingress      Service             -       -    create  reconcile  -   -

      Op:      4 create, 0 delete, 0 update, 0 noop
      Wait to: 4 reconcile, 0 delete, 0 noop

      12:02:38PM: ---- applying 4 changes [0/4 done] ----
      12:02:38PM: create clusterrole/p-rmq-servicebroker-role (rbac.authorization.k8s.io/v1) cluster
      12:02:38PM: create clusterrolebinding/p-rmq-servicebroker-rolebinding (rbac.authorization.k8s.io/v1) cluster
      12:02:38PM: create service/p-rmq-servicebroker-ingress (v1) namespace: pivotal-rabbitmq-system
      12:02:38PM: create deployment/p-rmq-servicebroker (apps/v1) namespace: pivotal-rabbitmq-system
      12:02:38PM: ---- waiting on 4 changes [0/4 done] ----
      12:02:38PM: ok: reconcile clusterrole/p-rmq-servicebroker-role (rbac.authorization.k8s.io/v1) cluster
      12:02:38PM: ok: reconcile clusterrolebinding/p-rmq-servicebroker-rolebinding (rbac.authorization.k8s.io/v1) cluster
      12:02:38PM: ok: reconcile service/p-rmq-servicebroker-ingress (v1) namespace: pivotal-rabbitmq-system
      12:02:38PM: ongoing: reconcile deployment/p-rmq-servicebroker (apps/v1) namespace: pivotal-rabbitmq-system
      12:02:38PM:  ^ Waiting for 1 unavailable replicas
      12:02:38PM:  L ok: waiting on replicaset/p-rmq-servicebroker-58949574b5 (apps/v1) namespace: pivotal-rabbitmq-system
      12:02:38PM:  L ongoing: waiting on pod/p-rmq-servicebroker-58949574b5-jdbcz (v1) namespace: pivotal-rabbitmq-system
      12:02:38PM:     ^ Pending: ContainerCreating
      12:02:38PM: ---- waiting on 1 changes [3/4 done] ----
      12:02:45PM: ok: reconcile deployment/p-rmq-servicebroker (apps/v1) namespace: pivotal-rabbitmq-system
      12:02:45PM: ---- applying complete [4/4 done] ----
      12:02:45PM: ---- waiting complete [4/4 done] ----

      Succeeded
    </pre>

The <code>set</code> flag refers to CNAB parameters that configure your CNAB installation.
The table below lists the <%= vars.product_short %> CNAB parameters that are available to use with the `--set`
flag.

<p class="note">
  <strong>Note:</strong> You can also pass CNAB parameters using a JSON file with the
  <code>--parameters FILENAME</code> flag.
</p>

<table>
  <tr>
    <th width="35%">Parameter</th>
    <th width="65%">Description</th>
  </tr>
  <tr>
    <td><code>broker_username</code></td>
    <td>Username for the service broker</td>
  </tr>
  <tr>
    <td><code>broker_password</code></td>
    <td>Password for the service broker</td>
  </tr>
  <tr>
    <td>(Optional) <code>rabbitmq_service_type</code></td>
    <td>
      Kubernetes service type for the RabbitmqCluster service.
      Available values are:
      <ul>
        <li><code>ClusterIP</code></li>
        <li><code>NodePort</code></li>
        <li><code>LoadBalancer</code></li>
      </ul>
    </td>
  </tr>
  <tr>
    <td>(Optional) <code>broker_service_type</code></td>
    <td>
      Kubernetes Service type for the service broker.
      Available values are:
      <ul>
        <li><code>ClusterIP</code></li>
        <li><code>NodePort</code></li>
        <li><code>LoadBalancer</code></li>
      </ul>
    </td>
  </tr>
  <tr>
    <td>(Optional) <code>service_annotations</code></td>
    <td>
      Kubernetes annotations for service metadata such as for IaaS configuration.
      If the configuration you want requires multiple key-value pairs,
      add them as a <code>\n</code> separated string. <br>For example:
      <code>--set service_annotations="service.k8s.io/cert: arn:aws:acm:us-east-1\nservice.k8s.io/ports: 443,889"</code>
    </td>
  </tr>
  <tr>
    <td>(Optional) <code>storage_class_name</code></td>
    <td>Name of the Kubernetes <code>StorageClass</code> to use for provisioning RabbitmqCluster
      <code>PersistentVolumes</code></td>
  </tr>
  <tr>
    <td>(Optional) <code>storage_capacity</code></td>
    <td>Capacity set in the RabbitmqCluster <code>PersistentVolumeClaims</code></td>
  </tr>
  <tr>
    <td>(Optional) <code>default_rabbitmq_cpu_request</code></td>
    <td>This is the CPU requested by each RabbitMQ Pod, measured in millicores. This value is the minimum that
      must be available in a Kubernetes node to schedule the Pod. The default is 100m.</td>
  </tr>
  <tr>
    <td>(Optional) <code>default_rabbitmq_cpu_limit</code></td>
    <td>This is the CPU limit for each RabbitMQ Pod, measured in millicores. The default is 500m.</td>
  </tr>
  <tr>
    <td>(Optional) <code>default_rabbitmq_memory_request</code></td>
    <td>This is the memory requested by each RabbitMQ Pod. It is measured in mebibytes (Mi) or gibibytes (Gi).
      This value is the minimum that must be available in a Kubernetes node to schedule the Pod. The default is
      2 Gi.</td>
  </tr>
  <tr>
    <td>(Optional) <code>default_rabbitmq_memory_limit</code></td>
    <td>This is the memory limit for each RabbitMQ Pod. It is measured in mebibytes (Mi) or gibibytes (Gi).
      The default is 2 Gi.</td>
  </tr>
</table>

## <a id='register'></a>(Optional) Register the Service Broker with Cloud Foundry

The service broker is an optional component that enables integration with Cloud Foundry, such as
<%= vars.app_runtime %>.

To register the service broker:

1. Log in to the cf CLI.

1. Run:

    ```
    cf create-service-broker SERVICE-BROKER-NAME BROKER-USERNAME BROKER-PASSWORD https://IP-ADDRESS:8080
    ```

    For example:

    <pre class="terminal">
      ~$ cf create-service-broker rabbitmq-for-k8s user1 example-password http://12.13.14.15:8080
      OK
    </pre>

<p class="note">
  <strong>Note:</strong>
  To register a service broker this way, you need to be logged in as Cloud Foundry admin.
  If you want, you can register a space-scoped service broker as a normal user by adding
  <code>--space-scoped</code> parameter to the command above.
</p>

For more information about registering service brokers,
see [Register a Broker](https://docs.cloudfoundry.org/services/managing-service-brokers.html#register-broker)
in Cloud Foundry documentation.

## <a id='configure'></a> (Optional) Configure the Kubernetes Operator

For more information about configuring the Kubernetes Operator, see
[Configuring <%= vars.product_full %>](./configuring.html).
