---
title: Using Pivotal RabbitMQ for Kubernetes
owner: RMQ for k8s
---

<strong><%= modified_date %></strong>

This topic describes how to use <%= vars.product_full %> using kubectl and YAML.
To use it with <%= vars.platform_name %> and Cloud Foundry instead, see
[Using with <%= vars.platform_name %>](using-service-broker.html).

## <a id='availability'></a> Confirm Service Availability

For an app to use <%= vars.product_short %>, the product must be deployed to your Kubernetes cluster.

To confirm this availability:

1. Run `kubectl get customresourcedefinitions.apiextensions.k8s.io`.
1. Check that `rabbitmqclusters.rabbitmq.pivotal.io` is on the list, as in the example below.

    <pre class="terminal">
    $ kubectl get customresourcedefinitions.apiextensions.k8s.io
    NAME                                   CREATED AT
    rabbitmqclusters.rabbitmq.pivotal.io   2019-10-23T10:11:06Z
    </pre>

If it is on the list, <%= vars.product_short %> is available. If it is not, ask your operator to install it by
following the steps in [Installing and Configuring Using CNAB](./installing-cnab.html) or
[Installing and Configuring Using Kubernetes Manifests](./installing.html).

## <a id='psp'></a> Pod Security Policies

If you have pod security policies enabled in the Kubernetes cluster, you must create a `ClusterRole` and
`ClusterRoleBinding` to enable the pods to be scheduled.
If you do not have Pod security policies enabled, skip to <a href="#create">Create a RabbitMQ Instance</a> below.

For more information about pod security policies, see the
[Kubernetes documentation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/).

### <a id='minimum-psp'></a> Minimum Pod Security Policies

For the minimum resources required to deploy the Operator successfully, see
[Pod Security Policy Example for the Operator](examples-annex.html#operator-psp-example).

For the minimum resources required to deploy the Service Broker successfully, see
[Pod Security Policy Example for the Service Broker](examples-annex.html#servicebroker-psp-example).

For the minimum resources required to deploy a RabbitMQ instance successfully, see
[Pod Security Policy Example for a RabbitMQ Instance](examples-annex.html#rabbitmq-psp-example).<br>
RabbitMQ instances need to run as a `root` user and mount volumes of the types `secret`, `configMap`,
`persistentVolumeClaim`, and `emptyDir`.

## <a id='create'></a> Create a RabbitMQ Instance

To create a RabbitMQ instance, you must create a `RabbitmqCluster` resource definition and apply it.
RabbitMQ Operator creates the necessary resources, such as `services` and `statefulset`, in the same namespace
in which the `RabbitmqCluster` was defined.

1. Create a YAML file to define a `RabbitmqCluster` resource named `definition.yaml`.

    <p class="note">
      <strong>Note:</strong> The YAML file can have any name, but the steps that follow assume it is named
      <code>definition</code>.
    </p>

1. Copy and paste the below snippet into the file and save it.

    ```
    apiVersion: rabbitmq.pivotal.io/v1beta1
    kind: RabbitmqCluster
    metadata:
      name: definition
    ```

1. Apply the definition by running:

    ```
    kubectl apply -f definition.yaml
    ```

1. Check that the process was successful by running:

    ```
    kubectl get all -l app=definition
    ```

    If successful, you see a running pod and a service that exposes the instance.<br><br>

    For example:
    <pre class="terminal">
    $ kubectl get all -l app=definition
    NAME                           READY   STATUS    RESTARTS   AGE
    pod/definition-rabbitmq-server-0   1/1     Running   0          112s

    NAME                               TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                        AGE
    service/definition-rabbitmq-headless   ClusterIP   None             <none>        4369/TCP                       113s
    service/definition-rabbitmq-ingress    ClusterIP   10.103.214.196   <none>        5672/TCP,15672/TCP,15692/TCP   113s
    </pre>

    If the pod is not running within a few minutes, follow the steps in
    [Troubleshooting <%= vars.product_full %>](./troubleshooting.html#failed-instance).
    If you cannot solve the problem, contact your operator or email pivotal-cf-feedback@pivotal.io.

## <a id='configure'></a> Configure a RabbitMQ Instance

The `RabbitmqCluster` definition can include multiple settings.
When these settings are not specified, the Operator configuration provides default values.

To configure a RabbitMQ instance:

1. Open `definition.yaml`.

1. Add any of the properties described in [ConfigMap Parameters and Settings](./configuring.html#settings)
along with their values.

An example is shown below.

    ```
    apiVersion: rabbitmq.pivotal.io/v1beta1
    kind: RabbitmqCluster
    metadata:
      name: rabbitmqcluster-sample
    spec:
      replicas: 3
      service:
        type: LoadBalancer
        annotations:
          service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
      image: rabbitmq:3.8
      imagePullSecret: some-secret
      persistence:
        storageClassName: fast
        storage: 20Gi
      resource:
        request:
          cpu: 1000m
          memory: 2Gi
        limit:
          cpu: 1000m
          memory: 2Gi
    ```

    <p class="note">
      <strong>Note:</strong> You can also edit the the configuration in place by running
      <code>kubectl edit rabbitmqcluster definition</code>.
    </p>

1. Save your changes to `definition.yaml`.

1. Apply the definition by running:

    ```
    kubectl apply -f definition.yaml
    ```

Changes to default values in the Operator configuration do not update existing `RabbitmqCluster` instances.
Operator configuration changes are only applied to newly created `RabbitmqCluster` instances.
For more information, see [Configuring <%= vars.product_full %>](./configuring.html).

## <a id='update'></a> Update a RabbitMQ Instance

You can add or change certain configurations for an existing RabbitMQ instance.
These configurations are listed in the table below.

<table class="nice">
      <th>Custom Resource attribute</th>
      <th>Impact on the RabbitMQ cluster</th>
    <tr>
      <td>
        <code>spec.service.annotations</code>
      </td>
      <td>Annotations on the ingress service</td>
    </tr>
    <tr>
      <td>
        <code>spec.resource.request.cpu</code>
      </td>
      <td>
        <a href="https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#meaning-of-cpu">CPU units</a>
        required
        <a href="https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#how-pods-with-resource-requests-are-scheduled">by the Kubernetes scheduler</a>
        for the container running RabbitMQ</td>
    </tr>
    <tr>
      <td>
        <code>spec.resource.limit.cpu</code>
      </td>
      <td>
        <a href="https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#meaning-of-cpu">CPU units</a>
        used to calculated the share of CPU time available to the RabbitMQ container
        <a href="https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#how-pods-with-resource-limits-are-run">per 100 ms</a>
      </td>
    </tr>
</table>

To update a RabbitMQ instance:

1. Open `definition.yaml`.

1. Add any of the properties listed in the table above along with their values.
An example is shown below.

    ```
    apiVersion: rabbitmq.pivotal.io/v1beta1
    kind: RabbitmqCluster
    metadata:
      name: simple
    spec:
      annotations:
        service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
      resource:
        request:
          cpu: 2000m
        limit:
          cpu: 2000m
    ```

1. Save your changes to `definition.yaml`.

1. Apply the definition by running:

    ```
    kubectl apply -f definition.yaml
    ```

1. Check that the changes have been applied by running:

    ```
    kubectl describe service definition-rabbitmq-ingress
    ```
    and

    ```
    kubectl describe statefulset definition-rabbitmq-server

## <a id='connect'></a> Connect an App to RabbitMQ

For an app to use RabbitMQ, you must configure it with the correct service name and credentials.

The service name is `INSTANCE-rabbitmq-ingress` in the namespace where RabbitMQ is deployed, where `INSTANCE`
is the name of your instance.
For example, for the `RabbitmqCluster` created in [Create a RabbitMQ instance](#create) above, the service name
is `definition-rabbitmq-ingress`.

Admin credentials for a RabbitMQ cluster are stored in a Kubernetes secret called `INSTANCE-rabbitmq-admin`,
where `INSTANCE` is the name of your instance.
Kubernetes encodes secrets using base64.

To retrieve credentials and display them in plaintext:

1. Display the username by running:

    ```
    kubectl -n NAMESPACE get secret INSTANCE-rabbitmq-admin -o jsonpath="{.data.rabbitmq-username}" | base64 --decode
    ```

    Where:
    <ul>
      <li><code>INSTANCE</code> is the name of your <code>RabbitmqCluster</code>
      <li><code>NAMESPACE</code> is the Kubernetes namespace that contains <code>RabbitmqCluster</code>
    </ul>

1. Display the password by running:

    ```
    kubectl -n NAMESPACE get secret INSTANCE-rabbitmq-admin -o jsonpath="{.data.rabbitmq-password}" | base64 --decode
    ```

See an example below.

<pre class="terminal">
  $ kubectl -n p-rmq-9ec22161-c935-4fab-a3fa-66f5446dc434 get secret definition-rabbitmq-admin -o jsonpath="{.data.rabbitmq-username}" | base64 --decode
  DbjXnPjLt82DbZC-xr5i_UiBx7nDRRqI
  $ kubectl -n p-rmq-9ec22161-c935-4fab-a3fa-66f5446dc434 get secret definition-rabbitmq-admin -o jsonpath="{.data.rabbitmq-password}" | base64 --decode
  SB6sezvZfSR4Yu36KC2n8dokmFcCXLWv
</pre>

## <a id='use'></a> Use the RabbitMQ Service in Your App

For information about how to start using your apps, see the
[RabbitMQ documentation](https://www.rabbitmq.com/getstarted.html).

## <a id="delete"></a> Delete a RabbitMQ Instance

To delete a service instance:

1. Run:

    ```
    kubectl delete rabbitmqcluster INSTANCE
    ```
    or

    ```
    kubectl delete -f INSTANCE.yaml
    ```

    Where `INSTANCE` is the name of your `RabbitmqCluster`.<br><br>

    For example:

    <pre class="terminal">
    $ kubectl delete rabbitmqclusters.rabbitmq.pivotal.io definition
    rabbitmqcluster.rabbitmq.pivotal.io "definition" deleted
    </pre>

    or

    <pre class="terminal">
    $ kubectl delete -f definition.yaml
    rabbitmqcluster.rabbitmq.pivotal.io "definition" deleted
    </pre>
