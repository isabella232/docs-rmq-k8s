---
title: Monitoring Pivotal RabbitMQ for Kubernetes
owner: RMQ for k8s
---

<strong><%= modified_date %></strong>

This topic describes how to monitor <%= vars.product_full %>.

## <a id='overview'></a> Overview

RabbitMQ v3.8 and later deploys with the `rabbitmq_prometheus` plugin. This enables a Prometheus deployment to
scrape metrics from the RabbitMQ cluster with minimal configuration.

[Prometheus](https://prometheus.io/) is a metrics database used in Kubernetes deployments.
Although Kubernetes can be configured with other monitoring methods, the Prometheus data model, service discovery
capability, and modular architecture make Prometheus especially well suited to monitoring cloud-native apps and
infrastructure.

Follow the steps in one of the two procedures below to monitor RabbitMQ using Prometheus:

* [Monitor RabbitMQ Using Prometheus Deployed with `ServiceMonitor`](#kube-prom)
* [Monitor RabbitMQ Using Prometheus with Scraping Annotations](#scrape)

To learn which procedure might be most suitable for you, follow the steps in
[Check Your Prometheus Configuration](#check-config) below.

## <a id='check-config'></a> Check Your Prometheus Configuration

<%# Write procedure for checking how Prometheus uses annotations with `ServiceMonitor` %>


## <a id='kube-prom'></a> Monitor RabbitMQ Using Prometheus Deployed with ServiceMonitor

The `kube-prometheus` project provides manifests for a metrics stack within your Kubernetes cluster, including
operators for Prometheus, Alert Manager, and Grafana.

For more information, see the [kube-prometheus project GitHub repository](https://github.com/coreos/kube-prometheus)
and the [kube-prometheus installation guide](https://github.com/coreos/kube-prometheus#quickstart) in GitHub.

Each `RabbitmqCluster` requires a `ServiceMonitor` custom resource to be deployed in its namespace.
This resource targets the `RabbitmqCluster` through a selector.

For more information about selectors, see the
[Kubernetes documentation](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors).

To monitor RabbitMQ using Prometheus deployed with `ServiceMonitor`: <%# Is this sentence definitely accurate for
what follows? %>

1. Display your `RabbitmqCluster` labels by running:

    ```
    kubectl get service CLUSTER-ingress --show-labels
    ```

    Where `CLUSTER` is the name of your cluster.

    For example, if your cluster name is `rabbitmq-1` the command is:

    <pre class="terminal">
      kubectl get service rabbitmq-1-ingress --show-labels`.
    </pre>

1. Copy the labels.

1. Paste the labels inside the `selector.matchLabels` section of the `ServiceMonitor` manifest.

    For example:

    ```
    apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    metadata:
      name: rabbitmq-1
      namespace: rabbitmq-1
      spec:
      endpoints:
      - interval: 15s
        port: https
      selector:
        matchLabels:
          app: rabbitmq-1
    ```

## <a id='scrape'></a> Monitor RabbitMQ Using Prometheus with Scraping Annotations

Before you can deploy Prometheus manually, the resources `ClusterRole` and `ClusterRoleBinding` are required for Prometheus to begin scraping metrics from your RabbitMQ cluster.

* The `ClusterRole` permits `get` access to the `/metrics` endpoint, as seen in the `ClusterRole` manifest
snippet below.

    ```
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: prometheus
    rules:
    - nonResourceURLs:
      - /metrics
      verbs:
      - get
    ```

* The `ClusterRoleBinding` links the `ClusterRole` to your Prometheus deploymentâ€™s `ServiceAccount`, as seen
in the `ClusterRoleBinding` manifest snippet below.

    ```
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: prometheus
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: prometheus
    subjects:
    - kind: ServiceAccount
      name: prometheus
      namespace: monitoring
    ```

1. To create these resources, run:

  ```
  kubectl apply -f FILE.yaml
  ```

  Where `FILE` is the name you choose for the file that will contain `ClusterRole` and `ClusterRoleBinding`.

From now on Prometheus will discover any new RabbitmqCluster provided Prometheus annotations are present.
By default, the annotations are present and can be seen in the `RabbitmqCluster` example below:

    ```
    apiVersion: rabbitmq.pivotal.io/v1beta1
    kind: RabbitmqCluster
    metadata:
      name: rabbitmq-1
    spec:
      service:
        annotations:
          "prometheus.io/scrape": "true"
          "prometheus.io/port": "15692"
    ```

## <a id='grafana'></a> Import Dashboards to Grafana

RabbitMQ provides Grafana dashboards that integrate the scraped Prometheus metrics.

To import dashboard to Grafana:

1. Go to the [Grafana website](https://grafana.com/orgs/rabbitmq) to view the list of official RabbitMQ Grafana
dashboards.
1. Click on the dashboard you want to use.
1. Click the **Download JSON** link.
1. Follow the steps in the [Grafana documentation](https://grafana.com/docs/reference/export_import/#importing-a-dashboard) to import your chosen dashboard into Grafana.
