---
title: Monitoring Pivotal RabbitMQ for Kubernetes
owner: RMQ for k8s
---

<strong><%= modified_date %></strong>

This topic describes how to monitor <%= vars.product_full %>.

## <a id='overview'></a> Overview

<%= vars.product_full %> deploys RabbitMQ clusters with the `rabbitmq_prometheus` plugin, which is enabled by
default.
`rabbitmq_prometheus` exposes a Prometheus-compatible metrics endpoint.

Some other monitoring tools also support Prometheus endpoints but this topic focuses on configuring
[Prometheus](https://prometheus.io/) to scrape these endpoints and configuring [Grafana](https://grafana.com/)
to visualize data stored in Prometheus.

## <a id='choose'></a> Choose a Monitoring Approach

Follow one of the procedures below to monitor RabbitMQ clusters:

1. [Monitor RabbitMQ Using Prometheus and Scraping Annotations](#prom-annotations)
Prometheus is likely already configured to monitor RabbitMQ clusters through scraping annotations.

1. [Monitor RabbitMQ Using the Prometheus Operator](#prom-operator)
The Prometheus Operator ignores the annotations in favor of a more flexible custom resource called
`ServiceMonitor` to define scraping configuration.

For more information, see the
[Prometheus Operator](https://github.com/coreos/prometheus-operator) in GitHub.

## <a id='prom-annotations'></a> Monitor RabbitMQ Using Prometheus and Scraping Annotations

Prometheus can automatically scrape all Pods with the `prometheus.io/scrape: true` annotation.
<%= vars.product_full %> has this annotation by default.
If you have Prometheus configured with this annotation then it is likely Prometheus is already monitoring your
RabbitMQ clusters.

To verify that you have the `prometheus.io/scrape: true` annotation:

1. Run:

    ```
    kubectl get -o yaml service INSTANCE-rabbitmq-ingress
    ```

    Where `INSTANCE` is the name of the service instance.

1. Check for `"prometheus.io/scrape": "true"` under `service/annotations` in the `spec.service` part of the
output, as in the example below:

    ```
    apiVersion: rabbitmq.pivotal.io/v1beta1
    kind: RabbitmqCluster
    metadata:
      name: INSTANCE
    spec:
      service:
        annotations:
          "prometheus.io/scrape": "true"
          "prometheus.io/port": "15692"
    ```

<%# Add steps for configuring adding the `prometheus.io/scrape: true` annotation. %>

After Prometheus successfully scrapes the RabbitMQ clusters, follow the steps in
[Import Dashboards to Grafana](#grafana) below.
<%# How does the operator know when the scraping has finished? %>


## <a id='prom-operator'></a> Monitor RabbitMQ Using the Prometheus Operator

To use the Prometheus Operator to monitor RabbitMQ clusters:

1. Verify that you have deployed the Prometheus Operator by running:

    ```
    kubectl get customresourcedefinitions.apiextensions.k8s.io servicemonitors.monitoring.coreos.com
    ```

    If this command returns an error, you do not have the Prometheus Operator deployed.
    <%# Link to procedure for deploying it. %>

When using the Prometheus Operator, you must create a `ServiceMonitor` resource to configure automatic discovery
of RabbitMQ clusters. To do so:

1. Create a YAML file named `rabbitmq-servicemonitor.yaml` with the following contents:

    ```
    apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    metadata:
      name: rabbitmq
    spec:
      endpoints:
      - interval: 15s
        port: prometheus
      selector:
        matchLabels:
          app.kubernetes.io/component: rabbitmq
      namespaceSelector:
        any: true
    ```

1. Create the `ServiceMonitor` resource by running:

    ```
    kubectl apply -f rabbitmq-servicemonitor.yaml
    ```

  This resource can be created in any namespace, as long as the Prometheus Operator has permissions to find it.

  <%# Is the command above missing a namespace? How does the operator know which namespaces the Prometheus Operator can find?
  I probably need to add: Where `NAMESPACE` is any namespace that the Prometheus Operator is permitted to locate. %>

### <a id='config-perm'></a> (Optional) Configure Permissions for the Prometheus Operator

If your RabbitMQ clusters do not appear in Prometheus, you might need to configure permissions for the
Prometheus Operator.

For more information about permissions, see
[RBAC](https://github.com/coreos/prometheus-operator/blob/master/Documentation/rbac.md) in GitHub.

For example, the following steps should work if you deployed the Prometheus Operator using `kube-prometheus`.
For more information, see [`kube-prometheus`](https://github.com/coreos/kube-prometheus) in GitHub.

1. Create a YAML file named `prometheus-roles.yaml` with the following contents:

  ```
    apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: ClusterRole
    metadata:
      name: prometheus
    rules:
    - apiGroups: [""]
      resources:
      - nodes
      - services
      - endpoints
      - pods
      verbs: ["get", "list", "watch"]
    - apiGroups: [""]
      resources:
      - configmaps
      verbs: ["get"]
    - nonResourceURLs: ["/metrics"]
      verbs: ["get"]
    ---
    apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: ClusterRoleBinding
    metadata:
      name: prometheus
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: prometheus
    subjects:
    - kind: ServiceAccount
      name: prometheus-k8s
      namespace: monitoring
  ```

1. Apply the permissions listed in `prometheus-roles.yaml` by running:

  ```
  kubectl apply -f prometheus-roles.yaml
  ```

After Prometheus successfully scrapes the RabbitMQ clusters, follow the steps in
[Import Dashboards to Grafana](#grafana) below.
<%# How does the operator know when the scraping has finished? %>

## <a id='grafana'></a> Import Dashboards to Grafana

RabbitMQ provides Grafana dashboards to visualize the metrics scraped by Prometheus.

To import dashboard to Grafana:

1. Go to the [Grafana website](https://grafana.com/orgs/rabbitmq) to view the list of official RabbitMQ Grafana
dashboards.
1. Click on the dashboard you want to use.
1. Click the **Download JSON** link or copy the dashboard ID.
1. Follow the steps in the [Grafana documentation](https://grafana.com/docs/reference/export_import/#importing-a-dashboard)
to import your chosen dashboard to Grafana.
