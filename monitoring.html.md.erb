---
title: Monitoring RabbitMQ for VMware Tanzu &#91;Kubernetes&#93;
owner: RMQ for k8s
---

<strong><%= modified_date %></strong>

This topic describes how to monitor <%= vars.product_full %>.

## <a id='overview'></a> Overview

<%= vars.product_full %> deploys RabbitMQ clusters with the `rabbitmq_prometheus` plugin, which is enabled by
default.
`rabbitmq_prometheus` exposes a Prometheus-compatible metrics endpoint.

While various monitoring tools support Prometheus endpoints, this topic focuses specifically on using
[Prometheus](https://prometheus.io/) to scrape these endpoints and using [Grafana](https://grafana.com/)
to visualize data stored in Prometheus.

## <a id='choose'></a> Choose a Monitoring Method

Follow one of the procedures below to monitor RabbitMQ clusters:

1. [Monitor RabbitMQ Using Prometheus and Scraping Annotations](#prom-annotations)

1. [Monitor RabbitMQ Using the Prometheus Operator](#prom-operator)

## <a id='prom-annotations'></a> Monitor RabbitMQ Using Prometheus and Scraping Annotations

Prometheus can automatically scrape all Pods that have the `prometheus.io/scrape: true` and metrics port annotations:

To add the scrape annotations:

1. Run:

    ```
    kubectl edit statefulset INSTANCE-rabbitmq-server
    ```

    Where `INSTANCE` is the name of the service instance.

1. Add `"prometheus.io/scrape": "true"` and `"prometheus.io/port: "15692"` under `spec/template/metadata/annotations` in the
output manifest, as in the example below:

    ```
    apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      name: INSTANCE-rabbitmq-server
    spec:
      template:
        metadata:
          annotations:
            prometheus.io/scrape: true
            prometheus.io/port: 15692
    ```

1. Apply the changes by saving the file (`:wq`)

This approach will trigger a `rollout restart` of the cluster Pods. Currently, these changes will be lost if the `StatefulSet` is recreated by the RabbitMQ operator. For a more persistent solution consider [using the Prometheus Operator](#prom-operator)

## <a id='prom-operator'></a> Monitor RabbitMQ Using the Prometheus Operator

The Prometheus Operator ignores Prometheus annotations and, instead, defines scraping configuration through a
more flexible custom resource called `PodMonitor`.
For more information, see the [Prometheus Operator](https://github.com/coreos/prometheus-operator) in GitHub.

To use the Prometheus Operator to monitor RabbitMQ clusters:

1. Deploy the Prometheus Operator. There are several ways to do so. Guidance is provided in the
[kube-prometheus](https://github.com/coreos/kube-prometheus/#quickstart) documentation in GitHub.

1. Verify that you have deployed the Prometheus `PodMonitor` Custom Resource Definition (CRD) by running:

    ```
    kubectl get customresourcedefinitions.apiextensions.k8s.io podmonitors.monitoring.coreos.com
    ```

    If this command returns an error, you do not have the Prometheus Operator deployed.

1. Create a YAML file named `rabbitmq-prometheus-patch.yaml` on your local machine.

1. Copy and paste the content below into `rabbitmq-prometheus-patch.yaml`, then save the file.

    ```
    spec:
      podMonitorNamespaceSelector:
        any: 'true'
    ```

1. Patch the Prometheus Operator by running:

    ```
    kubectl -n monitoring patch prometheuses k8s --type merge --patch "$(cat rabbitmq-prometheus-patch.yaml)"
    ```

1. Create a YAML file named `rabbitmq-podmonitor.yaml` on your local machine.

1. Copy and paste the content below into `rabbitmq-podmonitor.yaml`, then save the file.

    ```
    apiVersion: monitoring.coreos.com/v1
    kind: PodMonitor
    metadata:
      name: rabbitmq
    spec:
      podMetricsEndpoints:
      - interval: 15s
        port: prometheus
      selector:
        matchLabels:
          app.kubernetes.io/component: rabbitmq
      namespaceSelector:
        any: true
    ```

    You now have the `PodMonitor` resource, which is needed to configure the automatic discovery of RabbitMQ
    clusters.

1. Apply the `PodMonitor` resource by running:

    ```
    kubectl apply -f rabbitmq-podmonitor.yaml
    ```

    `PodMonitor` can be created in any namespace, as long as the Prometheus Operator has permissions to find it.
    For more information about these permissions, see
    [Configure Permissions for the Prometheus Operator](#config-perm) below.


### <a id='config-perm'></a> (Optional) Configure Permissions for the Prometheus Operator

If your RabbitMQ clusters do not appear in Prometheus, you might need to configure permissions for the
Prometheus Operator.

For more information about permissions, see
[RBAC](https://github.com/coreos/prometheus-operator/blob/master/Documentation/rbac.md) in GitHub.

The following steps have been tested with a `kube-prometheus` deployment.
To configure permissions for the Prometheus Operator:

1. Create a YAML file somewhere on your local machine named `prometheus-roles.yaml`.
1. Copy and paste the content below into `prometheus-roles.yaml` and save the file.

    ```
      apiVersion: rbac.authorization.k8s.io/v1beta1
      kind: ClusterRole
      metadata:
        name: prometheus
      rules:
      - apiGroups: [""]
        resources:
        - nodes
        - services
        - endpoints
        - pods
        verbs: ["get", "list", "watch"]
      - apiGroups: [""]
        resources:
        - configmaps
        verbs: ["get"]
      - nonResourceURLs: ["/metrics"]
        verbs: ["get"]
      ---
      apiVersion: rbac.authorization.k8s.io/v1beta1
      kind: ClusterRoleBinding
      metadata:
        name: prometheus
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: prometheus
      subjects:
      - kind: ServiceAccount
        name: prometheus-k8s
        namespace: monitoring
    ```

1. Apply the permissions listed in `prometheus-roles.yaml` by running:

    ```
    kubectl apply -f prometheus-roles.yaml
    ```

## <a id='grafana'></a> Import Dashboards to Grafana

RabbitMQ provides Grafana dashboards to visualize the metrics scraped by Prometheus.

To import a dashboard to Grafana:

1. Go to the [Grafana website](https://grafana.com/orgs/rabbitmq) to view the list of official RabbitMQ Grafana
dashboards.
1. Click on the dashboard you want to use.
1. Click the **Download JSON** link or copy the dashboard ID.
1. Follow the steps in the
[Grafana documentation](https://grafana.com/docs/reference/export_import/#importing-a-dashboard) to import your
chosen dashboard to Grafana.
