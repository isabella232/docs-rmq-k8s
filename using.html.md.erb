---
title: Using with kubectl and YAML
owner: RMQ for k8s
---

<strong><%= modified_date %></strong>

This topic describes how to use <%= vars.product_full %> using kubectl and YAML.

If you have a running <%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>) deployment,
you can instead use the procedures in [Using with Container Service Manager](./ksm.html).

## <a id='availability'></a> Confirm Service Availability

Before configuring your app to use <%= vars.product_short %>, ensure that <%= vars.product_short %> is deployed
to your Kubernetes cluster and is available.

To confirm this availability:

1. Run:

    ```
    kubectl get customresourcedefinitions.apiextensions.k8s.io
    ```

1. Verify that `rabbitmqclusters.rabbitmq.pivotal.io` is on the list, as in the example below.

    <pre class="terminal">
    $ kubectl get customresourcedefinitions.apiextensions.k8s.io
    NAME                                   CREATED AT
    rabbitmqclusters.rabbitmq.pivotal.io   2019-10-23T10:11:06Z
    </pre>

If it is on the list, <%= vars.product_short %> is available. If it is not, ask your operator to install it by
following the steps in [Installing <%= vars.product_full %>](./installing.html).


## <a id='psp'></a> (Optional) Apply Pod Security Policies

If you have Pod security policies enabled in the Kubernetes cluster, you must create a `ClusterRole` and
`ClusterRoleBinding` to enable the Pods to be scheduled.
For more information about Pod security policies, see the
[Kubernetes documentation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/).

If you do not have Pod security policies enabled, skip to <a href="#create">Create a RabbitMQ Instance</a> below.

To create a `ClusterRole` and `ClusterRoleBinding`:

1. Create YAML files to define the security policies for the Kubernetes Operator and
RabbitMQ instance, using the examples in [Examples of Pod Security Policies](./examples-annex.html).
  <p class="note">
    <strong>Note:</strong> RabbitMQ instances need to run as a <code>root</code> user and mount volumes of the types
    <code>secret</code>, <code>configMap</code>, <code>persistentVolumeClaim</code>, and <code>emptyDir</code>.
  </p>

1. For each of the three YAML files you created in step 1, run:

    ```
    kubectl apply -f POD-SECURITY-POLICY.yaml
    ```

## <a id='create'></a> Create a RabbitMQ Instance

To create a RabbitMQ instance, you must create a `RabbitmqCluster` resource definition and apply it.
RabbitMQ Operator creates the necessary resources, such as Services and StatefulSet, in the same namespace
in which the `RabbitmqCluster` was defined.

1. Create a YAML file to define a `RabbitmqCluster` resource named `definition.yaml`.

    <p class="note">
      <strong>Note:</strong> The YAML file can have any name, but the steps that follow assume it is named
      <code>definition</code>.
    </p>

1. Copy and paste the below snippet into the file and save it.

    ```
    apiVersion: rabbitmq.pivotal.io/v1beta1
    kind: RabbitmqCluster
    metadata:
      name: definition
    ```

1. Apply the definition by running:

    ```
    kubectl apply -f definition.yaml
    ```

1. Verify that the process was successful by running:

    ```
    kubectl get all -l app.kubernetes.io/name=definition
    ```

    If successful, you see a running Pod and a service that exposes the instance.<br><br>

    For example:
    <pre class="terminal">
    $ kubectl get all -l app.kubernetes.io/name=definition
    NAME                               READY   STATUS    RESTARTS   AGE
    pod/definition-rabbitmq-server-0   1/1     Running   0          112s

    NAME                                   TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                        AGE
    service/definition-rabbitmq-headless   ClusterIP   None             \<none\>        4369/TCP                       113s
    service/definition-rabbitmq-ingress    ClusterIP   10.103.214.196   \<none\>        5672/TCP,15672/TCP,15692/TCP   113s
    </pre>

    If the Pod is not running within a few minutes, follow the steps in
    [Troubleshooting <%= vars.product_full %>](./troubleshooting.html#failed-instance).
    If you cannot solve the problem, contact your operator or email pivotal-cf-feedback@pivotal.io.

You can now start using RabbitMQ in your app or continue with more advanced configuration options.
For more information, see the [RabbitMQ documentation](https://www.rabbitmq.com/getstarted.html).

## <a id='configure'></a> Configure a RabbitMQ Instance

To configure a RabbitMQ instance:

1. Open `definition.yaml` or edit the the configuration in place by running:

    ```
    kubectl edit rabbitmqcluster definition
    ```

1. Add any of the properties described below along with their values. Every property listed below is optional.

### <a name='replicas'></a> Replicas

**Description:** Specify the number of replicas for the RabbitmqCluster.

**Default Value:** 1

**Example:**

```
apiVersion: rabbitmq.pivotal.io/v1beta1
kind: RabbitmqCluster
metadata:
  name: rabbitmqcluster-sample
spec:
  replicas: 3
```

### <a name='images'></a> Image

**Description:** Specify the RabbitMQ image reference, using the version tag that was used during operator installation.
This property is necessary if, for example, you are using a private registry.

**Default Value:** The official [rabbitmq image on Dockerhub](https://hub.docker.com/_/rabbitmq).

**Example:**

```
apiVersion: rabbitmq.pivotal.io/v1beta1
kind: RabbitmqCluster
metadata:
  name: rabbitmqcluster-sample
spec:
  image: my-private-registry/rabbitmq:0.6.0-build.22
```

### <a name='image-pull-secret'></a> imagePullSecret

**Description:** Specify `imagePullSecret` for the RabbitMQ image.
If your registry requires authentication, this is the name of the secret used to pull images.
You can create the secret by running:

```
kubectl -n pivotal-rabbitmq-system create secret docker-registry
```

**Default Value:** N/A

**Example:**

```
apiVersion: rabbitmq.pivotal.io/v1beta1
kind: RabbitmqCluster
metadata:
  name: rabbitmqcluster-sample
spec:
  image: my-private-registry/rabbitmq:3.8
  imagePullSecret: some-secret
```

### <a name='service-type'></a> Service Type

**Description:** Specify the Kubernetes Service type for the RabbitmqCluster Service.
The available types are:

* ClusterIP
* NodePort
* LoadBalancer

<%= vars.product_short %> currently does not support the ExternalName Service Type.

**Default Value:** ClusterIP

**Example:**

```
apiVersion: rabbitmq.pivotal.io/v1beta1
kind: RabbitmqCluster
metadata:
  name: rabbitmqcluster-sample
spec:
  service:
    type: LoadBalancer
```

### <a name='service-annotations'></a> Service Annotations

**Description:** Specify the Kubernetes Service annotations for the RabbitmqCluster Service.

**Default Value:** N/A

**Example:**

```
apiVersion: rabbitmq.pivotal.io/v1beta1
kind: RabbitmqCluster
metadata:
  name: rabbitmqcluster-sample
spec:
  service:
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
```

### <a name='persistence'></a> Persistence

**Description:** Specify the persistence settings for the RabbitmqCluster Service.
The available settings are:

* `storageClassName`: The name of the Kubernetes StorageClass to use.
* `storage`: The capacity of the persistent volume, expressed as a Kubernetes resource quantity.

**Default Values:**

* `storageClassName`: Not set by default. If you do not set a value, the default `StorageClass` for the Kubernetes cluster is used.
* `storage`: 10Gi

To see the default `StorageClass`, run `kubectl get storageclasses`.

**Example:**

```
apiVersion: rabbitmq.pivotal.io/v1beta1
kind: RabbitmqCluster
metadata:
  name: rabbitmqcluster-sample
spec:
   persistence:
    storageClassName: fast
    storage: 20Gi
```

For more information about concepts mentioned above, see:
<table class="nice">
<col width="50%">
<col width="50%">
	<th>Concept</th>
	<th>More information in…</th>
	<tr>
		<td>StorageClass</td>
		<td>The <a href="https://kubernetes.io/docs/concepts/storage/storage-classes/#the-storageclass-resource">Kubernetes documentation</a></td>
	</tr>
	<tr>
		<td>Persistent volume capacity</td>
		<td>The <a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#capacity">Kubernetes documentation</a></td>
	</tr>
	<tr>
		<td>Kubernetes Resource Quantity</td>
		<td>The <a href="https://github.com/kubernetes/community/blob/master/contributors/design-proposals/scheduling/resources.md#resource-quantities">Kubernetes Resource Model documentation</a> in GitHub</td>
	</tr>
 </table>

### <a name='resource-reqs'></a> Resource Requirements

**Description:** Specify the resource requests and limits of the RabbitmqCluster Pods.

CPU requirements must be in CPU units. Memory requirements must be in bytes.<br>
You must express both values as a Kubernetes resource quantity.

The `RabbitMQCluster` does not deploy if these configurations are provided but not valid.

**Default Values:**

  * Memory limit: 2 Gi
  * CPU limit: 2000 millicores
  * Memory request: 2 Gi
  * CPU request: 1000 millicores

The RabbitMQ high-water mark is set to 0.4 times the memory limit.
VMware recommends keeping the memory requests and limits as the same value.

**Example:**

```
apiVersion: rabbitmq.pivotal.io/v1beta1
kind: RabbitmqCluster
metadata:
  name: rabbitmqcluster-sample
spec:
  resources:
    requests:
      cpu: 1000m
      memory: 2Gi
    limits:
      cpu: 1000m
      memory: 2Gi
```

For more information about concepts mentioned above, see:
<table class="nice">
<col width="50%">
<col width="50%">
	<th>Concept</th>
	<th>More information in…</th>
	<tr>
		<td>Resource request and limit requirements</td>
		<td>The <a href="https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/">Kubernetes documentation</a></td>
	</tr>
	<tr>
		<td>CPU measurement</td>
		<td>The <a href="https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#meaning-of-cpu">Kubernetes documentation</a></td>
	</tr>
	<tr>
		<td>High-water mark</td>
		<td>The <a href="https://www.rabbitmq.com/memory.html#threshold">RabbitMQ documentation</a></td>
	</tr>
 </table>

### <a name='affinity'></a> Affinity and Anti-affinity Rules

**Description:** Affinity and anti-affinity rules are structured in the same way as Kubernetes affinity rules.
For more information about affinity, see the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity).

**Default Value:** N/A

**Example:**

```
apiVersion: rabbitmq.pivotal.io/v1beta1
kind: RabbitmqCluster
metadata:
  name: rabbitmqcluster-sample
spec:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
            - node-1
```

### <a name='tolerations'></a> Pod Tolerations

**Description:** Add tolerations for the RabbitmqCluster Pods.
For more information about toleration, see the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration).

To set tolerations:

1. Save your changes to `definition.yaml`.

1. Apply the definition by running:

    ```
    kubectl apply -f definition.yaml
    ```

**Default Value:** N/A

**Example:**

```
apiVersion: rabbitmq.pivotal.io/v1beta1
kind: RabbitmqCluster
metadata:
  name: rabbitmqcluster-sample
spec:
  tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "rabbitmq"
      effect: "NoSchedule"
```

## <a id='update'></a> Update a RabbitMQ Instance

You can add, change, or remove properties in a `RabbitmqCluster` object for an existing RabbitMQ instance.

If you remove a property it reverts to its default value, if it has one.
To view the default values, see [Configure a RabbitMQ Instance](#configure) above.

The configurations are listed in the table below.

<table class="nice">
      <col width="33%">
      <th>Custom Resource attribute</th>
      <th>Description</th>
    <tr>
      <td>
        <code>metadata.labels</code>
      </td>
      <td>
        These are labels to add to every child resource, such as StatefulSet and Service.
        Labels starting with <code>app.kubernetes.io</code> are ignored because these are reserved for internal use.
        Modifying labels triggers a rolling restart of StatefulSet.
      </td>
    </tr>
    <tr>
      <td>
        <code>metadata.annotations</code>
      </td>
      <td>
        These are annotations to add to every child resource, such as StatefulSet and Service.<br><br>
        Annotations containing <code>kubernetes.io</code> and <code>k8s.io</code> are ignored because these
        are reserved for Kubernetes core components.
        When <code>spec.service.annotations</code> is specified, annotations for ingress are merged between
        <code>spec.service.annotations</code> and <code>metadata.annotations</code>.<br><br>
        If the same key is specified in both configurations, the value from <code>spec.service.annotations</code>
        is applied. Modifying annotations triggers a rolling restart of StatefulSet.
      </td>
    </tr>
    <tr>
      <td>
        <code>spec.image</code>
      </td>
      <td>
      The RabbitMQ image reference.
      </td>
    </tr>
    <tr>
      <td>
        <code>spec.imagePullSecret</code>
      </td>
      <td>The name of the Kubernetes secret that accesses the registry which contains
        the RabbitMQ image. This is only required for private registries.
      </td>
    </tr>
    <tr>
      <td>
        <code>spec.service.type</code>
      </td>
      <td>
      The Kubernetes Service type for the RabbitmqCluster Service. This must be ClusterIP, NodePort, or LoadBalancer.
      </td>
    </tr>
    <tr>
      <td>
        <code>spec.service.annotations</code>
      </td>
      <td>
      These are annotations on the ingress service.
      Annotations containing <code>kubernetes.io</code> and <code>k8s.io</code> are ignored because these are
      reserved for Kubernetes core components.
      </td>
    </tr>
    <tr>
      <td>
        <code>spec.resource.request.cpu</code>
      </td>
      <td>
        The CPU units required by the Kubernetes scheduler for the container running RabbitMQ.
      </td>
    </tr>
    <tr>
      <td>
        <code>spec.resource.limit.cpu</code>
      </td>
      <td>
        The CPU units used to calculate the share of CPU time available to the RabbitMQ container per 100 ms.
      </td>
    </tr>
    <tr>
      <td>
        <code>spec.affinity</code>
      </td>
      <td>
        The Pod affinity and anti-affinity rules.
      </td>
    </tr>
</table>

For more information about CPU units, the Kubernetes scheduler, and CPU time availability, see the
[Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container).

For more information about Pod affinity and anti-affinity rules, see the
[Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity).

To update a RabbitMQ instance:

1. Open `definition.yaml`.

1. Add or modify any of the properties listed in the table above.

1. Save your changes to `definition.yaml`.

1. Apply the definition by running:

    ```
    kubectl apply -f definition.yaml
    ```

1. Verify that the changes have been applied by running:

    ```
    kubectl describe service definition-rabbitmq-ingress
    ```

    and

    ```
    kubectl describe statefulset definition-rabbitmq-server
    ```

## <a id='set-pdb'></a> (Optional) Set a Pod Disruption Budget

A Pod Disruption Budget (PDB) limits the number of Pod replicas that are down simultaneously because of
voluntary disruptions.

For example, a PDB can help:

* Maintain the availability of quorum-based distributed workloads during maintenance events, such
as Kubernetes API upgrades or kernel upgrades.
* Reduce downtime for RabbitMQ configurations that normally sacrifice availability in favor of data
consistency, such as pause-minority mode for partition tolerance.

### <a id='create-pdb'></a> Create a `PodDisruptionBudget` Object

To create and set a `PodDisruptionBudget` object:

1. Create a file called `rabbitmq-pdb.yaml` that includes:

    ```
    apiVersion: policy/v1beta1
    kind: PodDisruptionBudget
    spec:
      maxUnavailable: 1
      selector:
        matchLabels:
          app.kubernetes.io/name: YOUR-RABBITMQ-CUSTOM-RESOURCE-NAME
    ```

1. Run:

    ```
    kubectl apply -f rabbitmq-pdb.yaml
    ```

For more information about concepts mentioned above, see:
<table class="nice">
<col width="50%">
<col width="50%">
	<th>Concept</th>
	<th>More information in…</th>
	<tr>
		<td>PDBs</td>
		<td>The <a href="https://kubernetes.io/docs/tasks/run-application/configure-pdb/">Kubernetes documentation</a></td>
	</tr>
	<tr>
		<td>Voluntary and involuntary disruptions</td>
		<td>The <a href="https://kubernetes.io/docs/concepts/workloads/pods/disruptions/#voluntary-and-involuntary-disruptions">Kubernetes documentation</a></td>
	</tr>
	<tr>
		<td>pause-minority mode</td>
		<td>The <a href="https://www.rabbitmq.com/partitions.html#automatic-handling">RabbitMQ documentation</a></td>
	</tr>
 </table>

## <a id='find'></a> Find Your RabbitmqCluster Service Name and Admin Credentials

If an app is deployed in the same Kubernetes cluster as RabbitMQ, you can use the RabbitmqCluster Service name
and admin credentials to connect that app to RabbitMQ.
The steps required to make that connection can vary greatly by deployment and are beyond the scope of this
documentation.

Follow the procedures below to find your RabbitmqCluster Service name and admin credentials.


### <a id='name'></a> Find Your RabbitmqCluster Service Name

To find your RabbitmqCluster Service name:

1. Run:

    ```
    kubectl get all -l app=definition
    ```

1. Read the `INSTANCE` part of `INSTANCE-rabbitmq-ingress` in the namespace where RabbitMQ is deployed.
`INSTANCE` is the service name.

For example, for the RabbitmqCluster created in [Create a RabbitMQ Instance](#create) above, the service name
is `definition-rabbitmq-ingress`.


### <a id='creds'></a> Retrieve Your RabbitMQ Admin Credentials

Admin credentials for a RabbitmqCluster are stored in a Kubernetes secret called `INSTANCE-rabbitmq-admin`,
where `INSTANCE` is the name of your instance.
Kubernetes encodes secrets using base64.

To retrieve credentials and display them in plaintext:

1. Display the username by running:

    ```
    kubectl -n NAMESPACE get secret INSTANCE-rabbitmq-admin -o jsonpath="{.data.rabbitmq-username}" | base64 --decode
    ```

    Where:
    <ul>
      <li><code>INSTANCE</code> is the name of your <code>RabbitmqCluster</code>
      <li><code>NAMESPACE</code> is the Kubernetes namespace that contains <code>RabbitmqCluster</code>
    </ul>

1. Display the password by running:

    ```
    kubectl -n NAMESPACE get secret INSTANCE-rabbitmq-admin -o jsonpath="{.data.rabbitmq-password}" | base64 --decode
    ```

    For example:

    <pre class="terminal">
      $ kubectl -n p-rmq-9ec22161-c935-4fab-a3fa-66f5446dc434 get secret definition-rabbitmq-admin -o jsonpath="{.data.rabbitmq-username}" | base64 --decode
      DbjXnPjLt82DbZC-xr5i_UiBx7nDRRqI
      $ kubectl -n p-rmq-9ec22161-c935-4fab-a3fa-66f5446dc434 get secret definition-rabbitmq-admin -o jsonpath="{.data.rabbitmq-password}" | base64 --decode
      SB6sezvZfSR4Yu36KC2n8dokmFcCXLWv
    </pre>

## <a id='verify-instance'></a> Verify the Instance is Running

Deploy the RabbitMQ throughput testing tool PerfTest to quickly verify that your instance is running correctly.
For more information, see [PerfTest](https://github.com/rabbitmq/rabbitmq-perf-test) in GitHub.

<p class="note">
  <strong>Note:</strong> If you run the below commands from outside the RabbitmqCluster namespace, add
  <code>-n NAMESPACE</code> to the kubectl commands below.
</p>

1. To install and run PerfTest, run these commands:

    ```
    instance=INSTANCE-NAME
    username=$(kubectl get secret ${instance}-rabbitmq-admin -o jsonpath="{.data.username}" | base64 --decode)
    password=$(kubectl get secret ${instance}-rabbitmq-admin -o jsonpath="{.data.password}" | base64 --decode)
    service=${instance}-rabbitmq-ingress
    kubectl run perf-test --image=pivotalrabbitmq/perf-test -- --uri "amqp://${username}:${password}@${service}"
    ```

1. Verify that PerfTest is sending and receiving messages by running:

    ```
    kubectl logs -f perf-test
    ```

    A log appears as in this example:

    <pre class="terminal">
    $ kubectl logs -f perf-test
    id: test-104555-858, starting consumer #0
    id: test-104555-858, starting consumer #0, channel #0
    id: test-104555-858, starting producer #0
    id: test-104555-858, starting producer #0, channel #0
    id: test-104555-858, time: 1.000s, sent: 19057 msg/s, received: 11768 msg/s, min/median/75th/95th/99th consumer latency: 4042/140608/190841/251618/258979 ?s
    id: test-104555-858, time: 2.000s, sent: 24020 msg/s, received: 16283 msg/s, min/median/75th/95th/99th consumer latency: 222998/507432/642110/754038/776600 ?s
    </pre>

1. Delete PerfTest by running:

    ```
    kubectl delete pod perf-test
    ```

## <a id='use'></a> Use the RabbitMQ Service in Your App

For information about how to start using your apps, see the
[RabbitMQ documentation](https://www.rabbitmq.com/getstarted.html).

## <a id="delete"></a> Delete a RabbitMQ Instance

To delete a service instance:

1. Run:

    ```
    kubectl delete rabbitmqcluster INSTANCE
    ```
    or

    ```
    kubectl delete -f INSTANCE.yaml
    ```

    Where `INSTANCE` is the name of your RabbitmqCluster.<br><br>

    For example:

    <pre class="terminal">
    $ kubectl delete rabbitmqclusters.rabbitmq.pivotal.io definition
    rabbitmqcluster.rabbitmq.pivotal.io "definition" deleted
    </pre>

    or

    <pre class="terminal">
    $ kubectl delete -f definition.yaml
    rabbitmqcluster.rabbitmq.pivotal.io "definition" deleted
    </pre>

If any Pods get stuck in the terminating state, see
[Pods Are Stuck in the Terminating State](./troubleshooting.html#not-terminating-pods).
