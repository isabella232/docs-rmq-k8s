---
title: Using Pivotal RabbitMQ for Kubernetes
owner: RMQ for k8s
---

<strong><%= modified_date %></strong>

This topic describes how to use <%= vars.product_full %> using kubectl and YAML.
To use it with <%= vars.platform_name %> and Cloud Foundry instead, see
[Using with <%= vars.platform_name %>](using-service-broker.html).

## <a id='availability'></a> Confirm Service Availability

Before configuring your app to use <%= vars.product_short %>, ensure that <%= vars.product_short %> is deployed
to your Kubernetes cluster and is available.

To confirm this availability:

1. Run:

    ```
    kubectl get customresourcedefinitions.apiextensions.k8s.io
    ```

1. Check that `rabbitmqclusters.rabbitmq.pivotal.io` is on the list, as in the example below.

    <pre class="terminal">
    $ kubectl get customresourcedefinitions.apiextensions.k8s.io
    NAME                                   CREATED AT
    rabbitmqclusters.rabbitmq.pivotal.io   2019-10-23T10:11:06Z
    </pre>

If it is on the list, <%= vars.product_short %> is available. If it is not, ask your operator to install it by
following the steps in [Installing and Configuring Using CNAB](./installing-cnab.html) or
[Installing and Configuring Using Kubernetes Manifests](./installing.html).


## <a id='psp'></a> (Optional) Apply Pod Security Policies

If you have Pod security policies enabled in the Kubernetes cluster, you must create a `ClusterRole` and
`ClusterRoleBinding` to enable the pods to be scheduled.
For more information about Pod security policies, see the
[Kubernetes documentation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/).

If you do not have Pod security policies enabled, skip to <a href="#create">Create a RabbitMQ Instance</a> below.

To create a `ClusterRole` and `ClusterRoleBinding`:

1. Create YAML files to define the security policies for the Operator, Service Broker, and
RabbitMQ instance, using the examples in [Examples of Pod Security Policies](./examples-annex.html).
  <p class="note"><strong>Note:</strong>
    RabbitMQ instances need to run as a <code>root</code> user and mount volumes of the types
    <code>secret</code>, <code>configMap</code>, <code>persistentVolumeClaim</code>, and <code>emptyDir</code>.
  </p>

1. For each of the three YAML files you created in step 1, run:

    ```
    kubectl apply -f POD-SECURITY-POLICY.yaml
    ```

## <a id='create'></a> Create a RabbitMQ Instance

To create a RabbitMQ instance, you must create a `RabbitmqCluster` resource definition and apply it.
RabbitMQ Operator creates the necessary resources, such as Services and StatefulSet, in the same namespace
in which the `RabbitmqCluster` was defined.

1. Create a YAML file to define a `RabbitmqCluster` resource named `definition.yaml`.

    <p class="note">
      <strong>Note:</strong> The YAML file can have any name, but the steps that follow assume it is named
      <code>definition</code>.
    </p>

1. Copy and paste the below snippet into the file and save it.

    ```
    apiVersion: rabbitmq.pivotal.io/v1beta1
    kind: RabbitmqCluster
    metadata:
      name: definition
    ```

1. Apply the definition by running:

    ```
    kubectl apply -f definition.yaml
    ```

1. Check that the process was successful by running:

    ```
    kubectl get all -l app=definition
    ```

    If successful, you see a running Pod and a service that exposes the instance.<br><br>

    For example:
    <pre class="terminal">
    $ kubectl get all -l app=definition
    NAME                               READY   STATUS    RESTARTS   AGE
    pod/definition-rabbitmq-server-0   1/1     Running   0          112s

    NAME                                   TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                        AGE
    service/definition-rabbitmq-headless   ClusterIP   None             \<none\>        4369/TCP                       113s
    service/definition-rabbitmq-ingress    ClusterIP   10.103.214.196   \<none\>        5672/TCP,15672/TCP,15692/TCP   113s
    </pre>

    If the Pod is not running within a few minutes, follow the steps in
    [Troubleshooting <%= vars.product_full %>](./troubleshooting.html#failed-instance).
    If you cannot solve the problem, contact your operator or email pivotal-cf-feedback@pivotal.io.

## <a id='configure'></a> Configure a RabbitMQ Instance

The `RabbitmqCluster` definition can include multiple settings.
When these settings are not specified, the default values in the `configmap` in the
`pivotal-rabbitmq-system namespace` are used.
For more information, see [Configuring <%= vars.product_full %>](./configuring.html).

To configure a RabbitMQ instance:

1. Open `definition.yaml`.

1. Add any of the properties described in [ConfigMap Parameters and Settings](./configuring.html#settings)
along with their values. <br><br>
For example:

    ```
    apiVersion: rabbitmq.pivotal.io/v1beta1
    kind: RabbitmqCluster
    metadata:
      name: rabbitmqcluster-sample
      labels:
        mylabel: labelValue
    spec:
      replicas: 3
      service:
        type: LoadBalancer
        annotations:
          service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
      image: rabbitmq:3.8
      imagePullSecret: some-secret
      persistence:
        storageClassName: fast
        storage: 20Gi
    ```

    <p class="note">
      <strong>Note:</strong> You can also edit the the configuration in place by running
      <code>kubectl edit rabbitmqcluster definition</code>.
    </p>

1. (Optional) Add resource requirements.
  * CPU requirements must be in CPU units.
  * Memory requirements must be in bytes.

    For example:

    ```
    apiVersion: rabbitmq.pivotal.io/v1beta1
    kind: RabbitmqCluster
    metadata:
      name: rabbitmqcluster-sample
    spec:
      replicas: 3
      resources:
        requests:
          cpu: 1000m
          memory: 2Gi
        limits:
          cpu: 1000m
          memory: 2Gi
    ```

    The RabbitMQ cluster does not deploy if these configurations are provided but not valid.
    For more information about these requirements, see the
    [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/).


    <p class="note">
      <strong>Note:</strong> The default values described in
      <a href="./configuring.html#configure">Configure the Kubernetes Operator</a> are applied if no resources
      are specified in the custom resource.
      To avoid setting resource requirements on the deployed RabbitMQ cluster, add a <code>resources</code>
      section in the custom resource with <code>requests: {}</code> and <code>limits: {}</code>.
    </p>

1. (Optional) Add affinity and anti-affinity rules to the custom resource.

    Rules are structured in the same way as a Kubernetes resource.<br><br>

    For example:

    ```
    apiVersion: rabbitmq.pivotal.io/v1beta1
    kind: RabbitmqCluster
    metadata:
      name: rabbitmqcluster-sample
    spec:
      replicas: 3
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                - node-1
    ```

    For more information about affinity and anti-affinity, see the
    [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity).

1. Save your changes to `definition.yaml`.

1. Apply the definition by running:

    ```
    kubectl apply -f definition.yaml
    ```

Changes to default values in the Operator configuration do not update existing `RabbitmqCluster` instances.
Operator configuration changes are only applied to newly created `RabbitmqCluster` instances.
For more information, see [Configuring <%= vars.product_full %>](./configuring.html).

## <a id='update'></a> Update a RabbitMQ Instance

You can add or change certain configurations for an existing RabbitMQ instance.
These configurations are listed in the table below.

<table class="nice">
      <col width="33%">
      <th>Custom Resource attribute</th>
      <th>Description</th>
    <tr>
      <td>
        <code>metadata.labels</code>
      </td>
      <td>
        Labels to be added to every child resource, such as StatefulSet and Service.
        Labels starting with <code>app.kubernetes.io</code> are ignored because these are reserved for internal use.
        Modifying labels triggers a rolling restart of the StatefulSet.
      </td>
    </tr>
    <tr>
      <td>
        <code>metadata.annotations</code>
      </td>
      <td>
        Annotations to be added to every child resource, such as StatefulSet and Service.
        Annotations containing <code>kubernetes.io</code> and <code>k8s.io</code> are ignored because these
        are reserved for Kubernetes core components.
        When <code>spec.service.annotations</code> is specified, annotations for ingress are merged between
        <code>spec.service.annotations</code> and <code>metadata.annotations</code>.
        If the same key is specified in both configurations, the value from <code>spec.service.annotations</code>
        is applied. Modifying annotations triggers a rolling restart of the StatefulSet.
      </td>
    </tr>
    <tr>
      <td>
        <code>spec.service.annotations</code>
      </td>
      <td>
      Annotations on the ingress service
      Annotations containing <code>kubernetes.io</code> and <code>k8s.io</code> are ignored because these are
      reserved for Kubernetes core components.
      </td>
    </tr>
    <tr>
      <td>
        <code>spec.resource.request.cpu</code>
      </td>
      <td>
        CPU units required by the Kubernetes scheduler for the container running RabbitMQ
      </td>
    </tr>
    <tr>
      <td>
        <code>spec.resource.limit.cpu</code>
      </td>
      <td>
        CPU units used to calculate the share of CPU time available to the RabbitMQ container per 100 ms
      </td>
    </tr>
    <tr>
      <td>
        <code>spec.affinity</code>
      </td>
      <td>
        Pod affinity and anti-affinity rules
      </td>
    </tr>
</table>

For more information about CPU units, the Kubernetes scheduler, and CPU time availability, see the
[Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container).

For more information about Pod affinity and anti-affinity rules, see the
[Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity).

To update a RabbitMQ instance:

1. Open `definition.yaml`.

1. Add or modify any of the properties listed in the table.

1. Save your changes to `definition.yaml`.

1. Apply the definition by running:

    ```
    kubectl apply -f definition.yaml
    ```

1. Check that the changes have been applied by running:

    ```
    kubectl describe service definition-rabbitmq-ingress
    ```

    and

    ```
    kubectl describe statefulset definition-rabbitmq-server
    ```

## <a id='find'></a> Find Your RabbitMQ Cluster Service Name and Admin Credentials

If an app is deployed in the same Kubernetes cluster as RabbitMQ, you can use the RabbitMQ cluster service name
and admin credentials to connect that app to RabbitMQ.
The steps required to make that connection can vary greatly by deployment and are beyond the scope of this
documentation.

Follow the procedures below to find your RabbitMQ cluster service name and admin credentials.


### <a id='name'></a> Find Your RabbitMQ Cluster Service Name

To find your RabbitMQ cluster service name:

1. Run:

    ```
    kubectl get all -l app=definition
    ```

1. Read the `INSTANCE` part of `INSTANCE-rabbitmq-ingress` in the namespace where RabbitMQ is deployed.
`INSTANCE` is the service name.

For example, for the `RabbitmqCluster` created in [Create a RabbitMQ Instance](#create) above, the service name
is `definition-rabbitmq-ingress`.


### <a id='creds'></a> Retrieve Your RabbitMQ Admin Credentials

Admin credentials for a RabbitMQ cluster are stored in a Kubernetes secret called `INSTANCE-rabbitmq-admin`,
where `INSTANCE` is the name of your instance.
Kubernetes encodes secrets using base64.

To retrieve credentials and display them in plaintext:

1. Display the username by running:

    ```
    kubectl -n NAMESPACE get secret INSTANCE-rabbitmq-admin -o jsonpath="{.data.rabbitmq-username}" | base64 --decode
    ```

    Where:
    <ul>
      <li><code>INSTANCE</code> is the name of your <code>RabbitmqCluster</code>
      <li><code>NAMESPACE</code> is the Kubernetes namespace that contains <code>RabbitmqCluster</code>
    </ul>

1. Display the password by running:

    ```
    kubectl -n NAMESPACE get secret INSTANCE-rabbitmq-admin -o jsonpath="{.data.rabbitmq-password}" | base64 --decode
    ```

    For example:

    <pre class="terminal">
      $ kubectl -n p-rmq-9ec22161-c935-4fab-a3fa-66f5446dc434 get secret definition-rabbitmq-admin -o jsonpath="{.data.rabbitmq-username}" | base64 --decode
      DbjXnPjLt82DbZC-xr5i_UiBx7nDRRqI
      $ kubectl -n p-rmq-9ec22161-c935-4fab-a3fa-66f5446dc434 get secret definition-rabbitmq-admin -o jsonpath="{.data.rabbitmq-password}" | base64 --decode
      SB6sezvZfSR4Yu36KC2n8dokmFcCXLWv
    </pre>

## <a id='use'></a> Use the RabbitMQ Service in Your App

For information about how to start using your apps, see the
[RabbitMQ documentation](https://www.rabbitmq.com/getstarted.html).

## <a id="delete"></a> Delete a RabbitMQ Instance

To delete a service instance:

1. Run:

    ```
    kubectl delete rabbitmqcluster INSTANCE
    ```
    or

    ```
    kubectl delete -f INSTANCE.yaml
    ```

    Where `INSTANCE` is the name of your `RabbitmqCluster`.<br><br>

    For example:

    <pre class="terminal">
    $ kubectl delete rabbitmqclusters.rabbitmq.pivotal.io definition
    rabbitmqcluster.rabbitmq.pivotal.io "definition" deleted
    </pre>

    or

    <pre class="terminal">
    $ kubectl delete -f definition.yaml
    rabbitmqcluster.rabbitmq.pivotal.io "definition" deleted
    </pre>
