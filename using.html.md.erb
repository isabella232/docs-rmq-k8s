---
title: Using Pivotal RabbitMQ for Kubernetes
owner: RMQ for k8s
---

<strong><%= modified_date %></strong>

This topic describes how to use <%= vars.product_full %> using kubectl and YAML.
To use it with <%= vars.platform_name %> and Cloud Foundry instead, see [Using with Pivotal Platform](using-service-broker.html).

## <a id='availability'></a> Confirm Service Availability

For an app to use <%= vars.product_short %>, the product must be deployed to your Kubernetes cluster.

To confirm this availability:

1. Run `kubectl get customresourcedefinitions.apiextensions.k8s.io`.
1. Check that `rabbitmqclusters.rabbitmq.pivotal.io` is on the list, as in the example below.

    <pre class="terminal">
    $ kubectl get customresourcedefinitions.apiextensions.k8s.io
    NAME                                   CREATED AT
    rabbitmqclusters.rabbitmq.pivotal.io   2019-10-23T10:11:06Z
    </pre>

    If it is, <%= vars.product_short %> is available. If it is not, ask your operator to install it by following the steps in [Installing and Configuring Using CNAB](./installing-cnab.html) or [Installing and Configuring Using Kubernetes Manifests](./installing.html).


## <a id='psp'></a> Pod Security Policies

If you have Pod security policies enabled in the Kubernetes cluster, you must create a `ClusterRole` and
`ClusterRoleBinding` to enable the Pods to be scheduled.
If you do not have Pod security policies enabled, skip to <a href="#create">Create a RabbitMQ Instance</a> below.

For more information about Pod security policies, see the [Kubernetes documentation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/).

### <a id='minimum-psp'></a> Minimum Pod Security Policies

For the minimum resources required to deploy the Operator successfully, see
[Pod Security Policy Example for the Operator](examples-annex.html#operator-psp-example).

For the minimum resources required to deploy the Service Broker successfully, see
[Pod Security Policy Example for the Service Broker](examples-annex.html#servicebroker-psp-example).

For the minimum resources required to deploy a RabbitMQ instance successfully, see
[Pod Security Policy Example for a RabbitMQ Instance](examples-annex.html#rabbitmq-psp-example).<br>
RabbitMQ instances need to run as a `root` user and mount volumes of the types `secret`, `configMap`, `persistentVolumeClaim`, and `emptyDir`.

## <a id='create'></a> Create a RabbitMQ Instance

To create a RabbitMQ instance, you need to create a `RabbitmqCluster` resource definition and apply it.
RabbitMQ Operator creates the necessary resources (such as `services` and `statefulset`) in the same namespace
in which the `RabbitmqCluster` was defined.

1. Create a YAML file to describe a `RabbitmqCluster` resource, such as `simple.yaml`. The simplest definition looks like this:

    ```
    apiVersion: rabbitmq.pivotal.io/v1beta1
    kind: RabbitmqCluster
    metadata:
      name: simple
    ```

1. Apply the definition by running:

    ```
    kubectl apply -f simple.yaml
    ```

1. Check that the process was successful by running:

    ```
    kubectl get all -l app=simple
    ```

    If successful, you should see a running pod and a service that exposes the instance.<br><br>
    For example:
    <pre class="terminal">
    $ kubectl get all -l app=simple
    NAME                           READY   STATUS    RESTARTS   AGE
    pod/simple-rabbitmq-server-0   1/1     Running   0          112s

    NAME                               TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                        AGE
    service/simple-rabbitmq-headless   ClusterIP   None             <none>        4369/TCP                       113s
    service/simple-rabbitmq-ingress    ClusterIP   10.103.214.196   <none>        5672/TCP,15672/TCP,15692/TCP   113s
    </pre>

    If the pod is not running within a few minutes, see [Troubleshooting Pivotal RabbitMQ for Kubernetes](./troubleshooting.html#failed-instance).
    If you cannot solve the problem, contact your operator or email pivotal-cf-feedback@pivotal.io.

## <a id='configure'></a>Configure a RabbitMQ Instance

The `RabbitmqCluster` definition might include multiple additional settings. When these settings are not specified, [Operator configuration](configuring.html) provides default values.

Here is an example with all settings specified explicitly:

  ```
  apiVersion: rabbitmq.pivotal.io/v1beta1
  kind: RabbitmqCluster
  metadata:
    name: rabbitmqcluster-sample
  spec:
    replicas: 3
    service:
      type: LoadBalancer
      annotations:
        service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
    image: rabbitmq:3.8
    imagePullSecret: some-secret
    persistence:
      storageClassName: fast
      storage: 20Gi
  ```

These properties are described in [Configuring Pivotal RabbitMQ for Kubernetes](./configuring.html).

## <a id='update'></a>Update a RabbitMQ Instance

You can add or change the annotations on the ingress service of a `RabbitmqCluster` instance by editing
`spec.service.annotations` in the Custom Resource.

1. Edit the YAML used to deploy the instance per the snippet below:

    ```
    apiVersion: rabbitmq.pivotal.io/v1beta1
    kind: RabbitmqCluster
    metadata:
      name: simple
    spec:
      annotations:
        service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
    ```

2. Apply the definition by running:

    ```
    kubectl apply -f simple.yaml
    ```

    <p class="note">
      <strong>Note:</strong> You can also edit the the configuration in place with
      <code>kubectl edit rabbitmqcluster simple</code>.
    </p>

3. Check that the change has been applied by verifying that the new annotation is present on the ingress service:

    ```
    kubectl describe service simple-rabbitmq-ingress
    ```

Changes to default values in the [Operator configuration](configuring.html) do not update existing
`RabbitmqCluster` instances.
Operator configuration changes are only applied to newly created `RabbitmqCluster` instances.

## <a id='connect'></a> Connect an App to RabbitMQ

For an app to use RabbitMQ, you must configure it with the correct service name and credentials.

The service name is `INSTANCE-rabbitmq-ingress` in the namespace where RabbitMQ is deployed, where `INSTANCE` is the name of your instance.
For example, for the `RabbitmqCluster` created above in [Create a RabbitMQ instance](#create), the service name is `simple-rabbitmq-ingress`.

Admin credentials for a RabbitMQ cluster are stored in a Kubernetes secret called `INSTANCE-rabbitmq-admin`.
Kubernetes encodes secrets using base64.

1. To retrieve credentials, and display them in plaintext, run the following commands:

  <pre class="terminal">
  # display the username
  kubectl -n NAMESPACE get secret INSTANCE-rabbitmq-admin -o jsonpath="{.data.rabbitmq-username}" | base64 --decode
  # display the password
  kubectl -n NAMESPACE get secret INSTANCE-rabbitmq-admin -o jsonpath="{.data.rabbitmq-password}" | base64 --decode
  </pre>

  Where:
  <ul>
    <li><code>INSTANCE</code> is the name of your <code>RabbitmqCluster</code>
    <li><code>NAMESPACE</code> is the Kubernetes namespace that contains <code>RabbitmqCluster</code>
  </ul>

  See an example below.

  <pre class="terminal">
  $ kubectl -n p-rmq-9ec22161-c935-4fab-a3fa-66f5446dc434 get secret simple-rabbitmq-admin -o jsonpath="{.data.rabbitmq-username}" | base64 --decode
  DbjXnPjLt82DbZC-xr5i_UiBx7nDRRqI
  $ kubectl -n p-rmq-9ec22161-c935-4fab-a3fa-66f5446dc434 get secret simple-rabbitmq-admin -o jsonpath="{.data.rabbitmq-password}" | base64 --decode
  SB6sezvZfSR4Yu36KC2n8dokmFcCXLWv
  </pre>

## <a id='use'></a> Use the RabbitMQ Service in Your App

For information about how to start using your apps, see the [RabbitMQ documentation](https://www.rabbitmq.com/getstarted.html).

## <a id="delete"></a> Delete a RabbitMQ Instance

To delete a service instance, run:

  ```
  kubectl delete rabbitmqcluster INSTANCE
  ```
  or

  ```
  kubectl delete -f INSTANCE.yaml
  ```

Where `INSTANCE` is the name of your `RabbitmqCluster`.

For example:

  <pre class="terminal">
  $ kubectl delete rabbitmqclusters.rabbitmq.pivotal.io simple
  rabbitmqcluster.rabbitmq.pivotal.io "simple" deleted
  </pre>

or

  <pre class="terminal">
  $ kubectl delete -f simple.yaml
  rabbitmqcluster.rabbitmq.pivotal.io "simple" deleted
  </pre>
