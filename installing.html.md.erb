---
title: Installing and Configuring Using Kubernetes Manifests
owner: RMQ for k8s
---

<strong><%= modified_date %></strong>

This topic describes how to install and configure <%= vars.product_full %>.

There are two methods to install <%= vars.product_short %>. Use one of the following:

* **Kubernetes Manifests:** The Kubernetes manifests method, documented below, requires manually editing YAML
  but is more flexible than the CNAB method.
  Pivotal recommends this method for advanced users.
* **CNAB:** The CNAB method uses CNAB to automate the installation process.
  For instructions, see [Installing and Configuring Using CNAB](./installing-cnab.html).
  For information about CNAB, see [Cloud Native Application Bundle](https://cnab.io).

## <a id='prerequisites'></a> Prerequisites

Before you install and configure <%= vars.product_short %>, you must install and configure the following software:

1. **kubectl:** For installation instructions,
see [Install and Set Up kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/) in the Kubernetes
documentation.

1. **The Docker CLI:** For installation instructions,
see the [Docker documentation](https://docs.docker.com/install/).

1. **A Kubernetes cluster:** You must use Kubernetes v1.14 or later. A default StorageClass has to be configured
or you need to specify which StorageClass to use.

1. **A private image registry:** Pivotal recommends that you keep the Kubernetes Operator and service broker
images private even if your repository is publicly accessible.
If you do not have access to a private image registry, email the team at rabbitmq-for-k8s@pivotal.io for help.

## <a id='overview'></a> Overview

To install and configure <%= vars.product_short %>:

1. [Download <%= vars.product_full %>](#artifact)
1. [Move the Images](#relocate)
1. [(Optional) Configure Kubernetes Cluster Access to Private Images](#private-images)
1. [Configure the Image Repository](#image-repo)
1. [(Optional) Configure the Service Type](#config-service-type)
1. [Create Service Broker Credentials](#broker-creds)
1. [Install <%= vars.product_short %>](#deploy-op-and-broker)
1. [Register the Service Broker with Cloud Foundry](#register-broker)

## <a id='artifact'></a> Download <%= vars.product_short %>

To download the <%= vars.product_short %> artifact:

1. Log in to your Early Access user account on [Pivotal Network](https://login.run.pivotal.io/login).
If you do not have an Early Access account, apply for one through the
[application form](https://pivotal.io/pivotal-rabbitmq-on-kubernetes).
<%= vars.product_short %> is currently only available to Early Access users.

1. Download the **<%= vars.product_short %>** artifact from
[Pivotal Network](https://network.pivotal.io/products/p-rabbitmq-for-kubernetes/).

<p class="note">
  <strong>Note:</strong> You do not need to download the <strong><%= vars.product_short %> CNAB</strong> artifact.
  It is used for <a href="./installing-cnab.html">Installing and Configuring Using CNAB</a>.
</p>

The artifact contains Docker images and deployment manifests for the Kubernetes Operator and the service broker.
The images are for:

* RabbitMQ
* The Kubernetes Operator
* The Service Broker

## <a id='set-ver-var'></a> Set a Version Variable

To set a version variable:

1. Run:

    ```
    export version=NUMBER-build.NUMBER
    ```

    Where `NUMBER` is the CNAB artifact version listed in the name of the artifact file you downloaded.

    For example:

    ```
    export version=0.4.0-build.32
    ```

## <a id='relocate'></a> Move the Images

To move the images:

1. Load the images to your local Docker by running the following commands:

    ```bash
    tar xvf PATH-TO-RABBITMQ-FOR-KUBERNETES-$version.tar
    cd rabbitmq-for-kubernetes-$version
    docker load -i images/rabbitmq-for-kubernetes-operator
    docker load -i images/rabbitmq
    docker load -i images/rabbitmq-for-kubernetes-servicebroker
    ```

1. Tag each image to point to your own image repository by running these commands:

    ```bash
    ~$ docker tag registry.pivotal.io/p-rabbitmq-for-kubernetes-staging/rabbitmq \
    >  YOUR-REPOSITORY/rabbitmq:$version
    ~$ docker tag registry.pivotal.io/p-rabbitmq-for-kubernetes-staging/rabbitmq-for-kubernetes-operator \
    >  YOUR-REPOSITORY/rabbitmq-for-kubernetes-operator:$version
    ~$ docker tag registry.pivotal.io/p-rabbitmq-for-kubernetes-staging/rabbitmq-for-kubernetes-servicebroker \
    >  YOUR-REPOSITORY/rabbitmq-for-kubernetes-servicebroker:$version
    ```

1. Push each image to your own image repository by running these commands:

    ```bash
    docker push YOUR-REPOSITORY/rabbitmq:$version
    docker push YOUR-REPOSITORY/rabbitmq-for-kubernetes-operator:$version
    docker push YOUR-REPOSITORY/rabbitmq-for-kubernetes-servicebroker:$version
    ```

## <a id='private-images'></a> Create the Namespace

To create the namespace:

1. Create a `pivotal-rabbitmq-system` namespace by running the following command:

    ```
    kubectl apply -f manifests/namespace.yaml
    ```

## <a id='private-images'></a> (Optional) Configure Kubernetes Cluster Access to Private Images

If you require authentication to pull images from your private image registry, you must authorize access to the
images from the `pivotal-rabbitmq-system` namespace.

<p class=note>
  <strong>Note:</strong> If your repository is publicly accessible, Pivotal recommends that you keep your
  Kubernetes Operator and service broker images in a private image repository.
</p>

To authorize access to images:

1. Create a secret for your private image registry by running:

    ```
    kubectl -n pivotal-rabbitmq-system create secret \
    docker-registry p-rmq-registry-access \
    --docker-server=DOCKER-SERVER \
    --docker-username=DOCKER-USERNAME \
    --docker-password=DOCKER-PASSWORD
    ```

    Where:
    + `DOCKER-SERVER` is the server URL for your private image registry.
    + `DOCKER-USERNAME` is your username for your private image registry authentication.
    + `DOCKER-PASSWORD` is your password for your private image registry authentication.

    For example:
    <pre class="terminal">
    $ kubectl -n pivotal-rabbitmq-system create secret \
    docker-registry p-rmq-registry-access \
    --docker-server=docker.io/my-registry \
    --docker-username=my-username \
    --docker-password=example-password1
    secret/p-rmq-registry-access created
    </pre>

1. Update your service account by running:

    ```
    kubectl -n pivotal-rabbitmq-system patch serviceaccount \
    default -p '{"imagePullSecrets": [{"name": "p-rmq-registry-access"}]}'
    ```

## <a id='image-repo'></a> Configure the Image Repository

To configure the image repository:

1. Provide your repository URL in the Kubernetes Operator manifest `manifests/operator.yaml`.
1. Replace all instances of `REPLACE-WITH-RABBITMQ-IMAGE-REFERENCE` with your image repository host.
If you use a private image registry, also replace the image pull secret as in the example below:

    ```
    apiVersion: v1
    data:
      CONFIG: |
        SERVICE:
          TYPE: "ClusterIP"
        IMAGE: "example-registry.pivotal.io/example-rabbitmq/rabbitmq:3.8.0"
        IMAGE_PULL_SECRET: "example-secret"
    kind: ConfigMap
    metadata:
      name: p-rmq-operator-config
      namespace: pivotal-rabbitmq-system
    ```

1. Replace all instances of `REPLACE-WITH-OPERATOR-IMAGE-URL` with the full Kubernetes Operator image reference.
This reference looks similar to the below:

    ```
    YOUR-REPOSITORY/rabbitmq-for-kubernetes-operator:$version
    ```

1. Provide your repository URL in the service broker manifest `manifests/broker.yaml`.
1. Replace all instances of `REPLACE-WITH-BROKER-IMAGE-URL` with the full broker image URL. This URL looks similar to the below:

    ```
    YOUR-REPOSITORY/rabbitmq-for-kubernetes-servicebroker:$version
    ```

## <a id='config-service-type'></a> (Optional) Configure the Service Broker ServiceType

The <%= vars.product_short %> service broker is an Open Service Broker API (OSBAPI)-compliant component that
enables integration with <%= vars.platform_name %> and other OSBAPI-based solutions, such as Service Catalog.
For more information, see [Service Catalog](https://github.com/kubernetes-sigs/service-catalog) in GitHub.

When the service broker is deployed, you must expose the service broker using a Kubernetes ServiceType.
This enables API clients to reach the service broker endpoint. By default, <%= vars.product_short %> configures
a `LoadBalancer` ServiceType.

For more information, see
[Publishing Services (ServiceTypes)](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types)
in the Kubernetes documentation.

To configure your service broker ServiceType:

1. Open `manifests/broker.yaml` in a text editor.
1. Edit the `Service` definition to meet your requirements.<br><br>
    For example, in the below code snippet, the value of `spec.type` is changed from `LoadBalancer` to `NodePort`:

    ```yaml
    ---
    apiVersion: v1
    kind: Service
    metadata:
      name: p-rmq-servicebroker
      namespace: pivotal-rabbitmq-system
    spec:
      ports:
      - port: 8080
        protocol: TCP
        targetPort: 8080
      selector:
        app: servicebroker
      sessionAffinity: None
      type: NodePort
    status:
      loadBalancer: {}
    ---
    ```

## <a id='broker-creds'></a> Create Service Broker Credentials

The <%= vars.product_short %> service broker looks for its username and password in a Kubernetes secret called
`broker-credentials` in the `pivotal-rabbitmq-system` namespace.

To create a secret:

1. Run these commands:

    ```
    echo -n BROKER-USERNAME > ./username
    echo -n BROKER-PASSWORD > ./password
    kubectl create secret generic p-rmq-servicebroker-admin -n pivotal-rabbitmq-system --from-file=./username --from-file=./password
    ```

<p class="note">
  <strong>Note:</strong>
  The secret name must be <code>broker-credentials</code> and must be in the <code>pivotal-rabbitmq-system</code>
  namespace with the username and password as part of the data. If not, the service broker fails to deploy.
  To read about other ways to create a secret, see
  <a href="https://kubernetes.io/docs/concepts/configuration/secret">the Kubernetes documentation</a>.
</p>

## <a id='deploy-op-and-broker'></a> Install <%= vars.product_short %>

To install <%= vars.product_short %>:

1. Run:

    ```
    kubectl apply -f manifests/
    ```

1. Apply the Kubernetes manifests you configured in the above steps. When you do so, kubectl:
    * Deploys the Kubernetes Operator
    * Deploys the service broker
    * Installs the `RabbitmqCluster` custom resource definition

## <a id='register-broker'></a> Register the Service Broker with Cloud Foundry

To register the service broker with Cloud Foundry:

1. Register the service broker by running:

    ```
    cf create-service-broker SERVICE-BROKER-NAME BROKER-USERNAME BROKER-PASSWORD \
    http://SERVICE-BROKER-IP:8080
    ```

    Where:
      * `SERVICE-BROKER-NAME` is a name you choose for the service broker
      * `SERVICE-BROKER-IP` is the external IP address assigned to the `LoadBalancer` named `p-rmq-servicebroker`.
      `LoadBalancer` is deployed in namespace `pivotal-rabbitmq-system`.
      * `BROKER-USERNAME` is the service broker username you used to create the Kubernetes secrets in
      [Create Service Broker Credentials](#broker-creds) above.
      * `BROKER-PASSWORD` is the service broker password you used to create the Kubernetes secrets in
      [Create Service Broker Credentials](#broker-creds) above.

2. After the service broker is registered, enable access in the Marketplace by running:

    ```
    cf enable-service-access p-rabbitmq-k8s -b SERVICE-BROKER-NAME
    ```

## <a id='configure'></a> (Optional) Configure the Operator

For more information about configuring the Kubernetes Operator, see
[Configuring <%= vars.product_full %>](./configuring.html).

## <a id='uninstall'></a> Uninstall <%= vars.product_short %>

To uninstall the product, follow the steps in [Uninstall Through the Manifests](./upgrading.html#uninstall-manifests).
