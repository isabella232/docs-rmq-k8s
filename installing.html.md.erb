---
title: Installing RabbitMQ for VMware Tanzu &#91;Kubernetes&#93;
owner: RMQ for k8s
---

<strong><%= modified_date %></strong>

This topic describes how to install and configure <%= vars.product_full %>.

## <a id='prerequisites'></a> Prerequisites

Before you install and configure <%= vars.product_short %>, you must install and configure the following software:

1. **kubectl:** For installation instructions,
see the [Kubernetes documentation](https://kubernetes.io/docs/tasks/tools/install-kubectl/) in the Kubernetes
documentation.

1. **The Docker CLI:** For installation instructions,
see the [Docker documentation](https://docs.docker.com/install/).

1. **A Kubernetes cluster:** You must use Kubernetes v1.14 or later. A default StorageClass has to be configured
or you need to specify which StorageClass to use.

1. **A private image registry:** VMware recommends that you keep the Kubernetes Operator
image private even if your registry is publicly accessible.
If you do not have access to a private image registry, email the team at rabbitmq-for-k8s@pivotal.io for help.

## <a id='overview'></a> Overview

To install and configure <%= vars.product_short %>:

1. [Download <%= vars.product_full %>](#artifact)
1. [Set a Version Variable](#set-ver-var)
1. [Move the Images](#relocate)
1. [Create the Namespace and Role-Based Access Control Objects](#namespace-rbac)
1. [(Optional) Configure Kubernetes Cluster Access to Private Images](#private-images)
1. [Configure the Image Registry](#image-repo)
1. [Install <%= vars.product_short %>](#deploy-op)

## <a id='artifact'></a> Download <%= vars.product_short %>

To download the <%= vars.product_short %> artifact:

1. Download the **<%= vars.product_short %>** artifact from
[<%= vars.product_network %>](https://network.pivotal.io/products/p-rabbitmq-for-kubernetes/).

The artifact contains Docker images, deployment manifests for the Kubernetes Operator, and a Helm chart.
You can deploy <%= vars.product_short %> with the Helm chart by using Container Service Manager (KSM).
See [Using <%= vars.product_full %> with Container Service Manager](./ksm.html).
<br><br>
The images are for:

* RabbitMQ
* The Kubernetes Operator

## <a id='set-ver-var'></a> Set a Version Variable

To set a version variable:

1. Run:

    ```
    export version=NUMBER-build.NUMBER
    ```

    Where `NUMBER` is the installation artifact version listed in the name of the artifact file you downloaded.<br><br>
    For example:

    <pre class="terminal">
    export version=0.6.0-build.22
    </pre>

## <a id='relocate'></a> Move the Images

To move the images:

1. Load the images to your local Docker by running these commands:

    ```
    mkdir rabbitmq-for-kubernetes-${version}
    ```

    ```
    tar -C rabbitmq-for-kubernetes-${version} -xf rabbitmq-for-kubernetes-${version}.tar
    ```

    ```
    cd rabbitmq-for-kubernetes-${version}
    ```

    ```
    docker load -i images/rabbitmq-for-kubernetes-operator
    ```

    ```
    docker load -i images/rabbitmq
    ```

1. Tag each image to point to your own image registry by running these commands:

    ```
    docker tag registry.pivotal.io/p-rabbitmq-for-kubernetes-staging/rabbitmq \
      YOUR-REGISTRY/rabbitmq:$version
    ```

    ```
    docker tag registry.pivotal.io/p-rabbitmq-for-kubernetes-staging/rabbitmq-for-kubernetes-operator \
      YOUR-REGISTRY/rabbitmq-for-kubernetes-operator:$version
    ```

1. Push each image to your own image registry by running these commands:

    ```
    docker push YOUR-REGISTRY/rabbitmq:$version
    ```

    ```
    docker push YOUR-REGISTRY/rabbitmq-for-kubernetes-operator:$version
    ```

## <a id='namespace-rbac'></a> Create the Namespace and Role-Based Access Control Objects

To create the namespace and role-based access control (RBAC) objects:

1. Create a `pivotal-rabbitmq-system` namespace by running:

    ```
    kubectl apply -f manifests/namespace.yaml
    ```
1. Create RBAC objects in the `pivotal-rabbitmq-system` namespace by running:

    ```
    kubectl apply -f manifests/rbac.yaml
    ```

## <a id='private-images'></a> (Optional) Configure Kubernetes Cluster Access to Private Images

If you require authentication to pull images from your private image registry, you must authorize access to the
images from the `pivotal-rabbitmq-system` namespace.

<p class=note>
  <strong>Note:</strong> If your registry is publicly accessible, VMware recommends that you keep your
  Kubernetes Operator image in a private image registry.
</p>

To authorize access to images:

1. Create a secret for your private image registry by running:

    ```
    kubectl -n pivotal-rabbitmq-system create secret \
    docker-registry p-rmq-registry-access \
    --docker-server=DOCKER-SERVER \
    --docker-username=DOCKER-USERNAME \
    --docker-password=DOCKER-PASSWORD
    ```

    Where:
    + `DOCKER-SERVER` is the server URL for your private image registry.
    + `DOCKER-USERNAME` is your username for your private image registry authentication.
    + `DOCKER-PASSWORD` is your password for your private image registry authentication.

    For example:
    <pre class="terminal">
    $ kubectl -n pivotal-rabbitmq-system create secret \
    docker-registry p-rmq-registry-access \
    --docker-server=docker.io/my-registry \
    --docker-username=my-username \
    --docker-password=example-password1
    secret/p-rmq-registry-access created
    </pre>

1. Update your service account by running:

    ```
    kubectl -n pivotal-rabbitmq-system patch serviceaccount \
    p-rmq-operator -p '{"imagePullSecrets": [{"name": "p-rmq-registry-access"}]}'
    ```

## <a id='image-repo'></a> Configure the Image Registry

To configure the image registry:

1. Edit `manifests/operator.yaml`.
1. Replace all instances of `REPLACE-WITH-OPERATOR-IMAGE-URL` with the full Kubernetes Operator image reference.
This reference should look similar to the below:

    ```
    image: YOUR-REGISTRY/rabbitmq-for-kubernetes-operator:$version
    ```

## <a id='deploy-op'></a> Install <%= vars.product_short %>

To install <%= vars.product_short %>:

1. Run:

    ```
    kubectl apply -f manifests/
    ```

1. Apply the Kubernetes manifests you configured in the above steps. When you do so, kubectl:
    * Deploys the Kubernetes Operator
    * Installs the `RabbitmqCluster` custom resource definition (CRD)

To uninstall the product, follow the steps in [Uninstall Through the Manifests](./upgrading.html#uninstall-manifests).

## <a id='using-helm'></a> Alternative method: using Operator Helm chart

This alternative method describes how to install and configure <%= vars.product_full %> using
a [Helm Chart](https://helm.sh/docs/topics/charts/) hosted in VMware Tanzu Network. 

## Additional prerequisites

In addition to the prerequisites listed [at the beginning](#prerequisites), this method requires:

1. An account in VMware Tanzu Network
1. Helm CLI. Installation instructions [here](https://helm.sh/docs/intro/install/)
1. Access to PivNet Registry. Check the section [Verify your access to image registry
](#helm-verify-docker-access) 

## <a id='helm-verify-docker-access'></a> Verify your access to image registry

To verify your access to VMware Tanzu Network registry:

1. Run:
    ```bash
    $ docker login registry.pivotal.io
    ```
    This command will prompt for a username and a password. the username is the email used to register
    in VMware Tanzu Network and password is the same password of your VMware Tanzu Network account.
2. Try to pull:
    ```bash
    $ docker pull registry.pivotal.io/p-rabbitmq-for-kubernetes/rabbitmq-for-kubernetes-operator:<some-version>
    ```
    Where <code>\<some-version\></code> is the product version in VMware Tanzu Network e.g. 0.7.0-build.41

If the above command is successful and you do not wish to relocate the Operator image, simply continue to the next step. If the above command fails with an error similar to:

```
Error response from daemon: pull access denied [...]
```

Then complete the steps documented in the main installation method [Set a Version Variable](#set-ver-var)
and [Move the Images](#relocate). Once these steps are complete, proceed to the next step or use
the main [installation method](#overview).

## <a id='helm-configure-repo'></a> Configure Helm chart repository

To configure a Helm chart repository hosted in VMware Tanzu Network:

1. Run:
   ```bash
    $ helm repo add p-rabbitmq-for-kubernetes https://registry.pivotal.io/chartrepo/p-rabbitmq-for-kubernetes --username='some-email@example.com' --password='some-password'
    ```
    Where the username is the email used to register in VMware Tanzu Network and password is the same
    password of your VMware Tanzu Network account. Please note that Helm will store these credentials
    in a hidden file in clear text; you might want to consider using a "bot" or shared account.
1. Update local helm cache:
    ```bash
      helm repo update
    ```
    

## <a id='helm-create-values'></a> Create a values file

To create a values file:

1. Run:
    ```bash
    helm show values p-rabbitmq-for-kubernetes/rabbitmq-operator > myvalues.yaml
    ```
2. Open the values file and customise the properties. The contents of the file should
look similar to this:
    ```
    global:
      imageRegistry: registry.pivotal.io
      # This is Pivotal Network username/email address
      imageUsername:
      imagePassword:
    images:
      operator:
        name: registry.pivotal.io/p-rabbitmq-for-kubernetes/rabbitmq-for-kubernetes-operator
        tag: "0.7.0-build.41"
    ```
    Customise the values <code>imageUsername</code> and <code>imagePassword</code>. If you were able to pull
    during the step [Verify your access to image registry](#helm-verify-docker-access), these credentials are
    your VMware Tanzu Network username and password.

    If you were not able to pull, these credentials should be the ones used to [Move the Images](#relocate).
    If you had to move the images, you will have to customise <code>imageRegistry</code> and
    <code>images.operator.name</code> to match the registry and the image name provided when you moved the images.

    This is an example of a customised values file:
    ```
    global:
      imageRegistry: someregistry.example.com
      # This is Pivotal Network username/email address
      imageUsername: myuser@example.com
      imagePassword: mypassword
    images:
      operator:
        name: someregistry.example.com/some-project/rabbitmq-for-kubernetes-operator
        tag: "0.7.0-build.41"
    ```

## <a id='helm-install-op'></a>Helm Install

To install the Operator using Helm:

1. Run:
    ```
    helm -n default install -f myvalues.yaml rabbitmq-for-kubernetes p-rabbitmq-for-kubernetes/rabbitmq-operator
    ```
    The option <code>-n default</code> is used by Helm to store a Kubernetes Secret in the default namespace. This
    is to avoid potential failures due to <code>kubectl</code> context referencing non-existing namespaces.
1. Verify the output of <code>helm install</code> command. A successful output would look similar to:
    ```
    NAME: rabbitmq-for-kubernetes
    LAST DEPLOYED: Tue Mar 31 16:13:05 2020
    NAMESPACE: default
    STATUS: deployed
    REVISION: 1
    TEST SUITE: None
    ```
