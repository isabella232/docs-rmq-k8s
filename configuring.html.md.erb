---
title: Configuring Pivotal RabbitMQ for Kubernetes
owner: RMQ for k8s
---
<strong><%= modified_date %></strong>

This topic describes how to configure the Kubernetes Operator using a configmap.

The configmap for the Kubernetes Operator is in the `pivotal-rabbitmq-system` namespace.
You must install <%= vars.product_full %> before you configure <%= vars.product_short %>.

## <a id='configure'></a> Configure the Kubernetes Operator

To configure the Kubernetes Operator:

1. View or change your settings by running:

    ```
    kubectl -n pivotal-rabbitmq-system edit configmap p-rmq-operator-config
    ```

    For information about supported parameters and settings, see [ConfigMap Parameters and Settings](#settings) below.

2.  If you edit the configmap, you must restart the Operator by running:

    ```
    kubectl -n pivotal-rabbitmq-system rollout restart deployment.apps/p-rmq-operator
    ```

    Configuration changes take effect when the Operator is restarted.


## <a id='settings'></a> ConfigMap Parameters and Settings

The configmap looks like this:

```
data:
  config: |
    image: eu.gcr.io/my-account/p-rabbitmq-for-kubernetes-staging-rabbitmq-228ecdc119f602d199fa39cc0326057e@sha256:6709cafde00784361b231f6c94b6dbecb8fefd3d3195676ed81823e007e37449
    imagePullSecret: p-rmq-registry-access
    service:
      type: NodePort
      annotations:
        service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
    persistence:
      storageClassName: azurefile
      storage: 20Gi
    resources:
      limits:
        memory: 2Gi
        cpu: 500m
      requests:
        memory: 2Gi
        cpu: 100m
```

The following parameters and settings are supported:
    <table>
      <tr>
        <th width="35%">Parameter</th>
        <th width="65%">Description</th>
      </tr>
      <tr>
        <td><code>image</code></td>
        <td>This is the RabbitMQ image to be used for RabbitMQ instances. </td>
      </tr>
      <tr>
        <td>(Optional) <code>imagePullSecret</code></td>
        <td>If your registry requires authentication, this is the name of the secret used to pull images. You can
          create the secret by running <code>kubectl -n pivotal-rabbitmq-system create secret docker-registry</code>.</td>
      </tr>
      <tr>
        <td>(Optional) <code>service</code></td>
        <td>
          This is the Kubernetes service for the <code>RabbitmqCluster</code> service.
          The available settings are <code>type</code> and <code>annotations</code>.
      </tr>
      <tr>
        <th width="35%">Service Setting</th>
        <th width="65%">Description</th>
      </tr>
      <tr>
        <td>(Optional) <code>type</code></td>
        <td>
          The available types are:
        <ul>
          <li><code>ClusterIP</code> (default)</li>
          <li><code>NodePort</code></li>
          <li><code>LoadBalancer</code></li>
        </ul>
        <%= vars.product_full %> currently does not support the <code>ExternalName</code> ServiceType.
        </td>
      </tr>
      <tr>
        <td>(Optional) <code>annotations</code></td>
        <td>Service annotations can be used to configure cloud-specific properties of a <code>LoadBalancer</code> service.</td>
      </tr>
      <tr>
        <th width="35%">Parameter</th>
        <th width="65%">Description</th>
      </tr>
      <tr>
        <td>(Optional) <code>persistence</code></td>
        <td>
          These are persistence settings for the <code>RabbitmqCluster</code> service.<br>
          The available settings are <code>storageClassName</code> and <code>storage</code>.
      </tr>
      <tr>
        <td>(Optional) <code>storageClassName</code></td>
        <td>This is the name of the Kubernetes storage class to use. If not configured, the default
          <code>storageclass</code> is used.</td>
      </tr>
      <tr>
        <td>(Optional) <code>storage</code></td>
        <td>This is the default capacity of the persistent volume.</td>
      </tr>
      <tr>
        <th width="35%">Parameter</th>
        <th width="65%">Description</th>
      </tr>
      <tr>
      <td>(Optional) <code>resources</code></td>
      <td>
        This setting can be used to set the CPU and memory for limits and requests for
        <code>RabbitmqCluster</code> containers.<br>
        The available settings are <code>limits</code> and <code>requests</code>.
      </td>
      </tr>
      <tr>
        <th width="35%">Resource Setting</th>
        <th width="65%">Description</th>
      </tr>
      <tr>
        <td>(Optional) <code>limits</code></td>
        <td> This sets the resource limits for the RabbitMQ containers in Kubernetes.<br>
             The available settings are <code>cpu</code> and <code>memory</code>.
        </td>
      </tr>
      <tr>
        <td>(Optional) <code>requests</code></td>
        <td> This sets the resource requests for the RabbitMQ containers in Kubernetes.<br>
             The available settings are <code>cpu</code> and <code>memory</code>.
        </td>
      </tr>
      <tr>
        <th width="35%">Limit and Request Setting</th>
        <th width="65%">Description</th>
      </tr>
      <tr>
        <td>(Optional) <code>cpu</code></td>
        <td>
          This sets the CPU requests and limits for the RabbitMQ containers. The default request value is 1000m (1CPU). The
          default limit value is 2000m (2CPUs).
        </td>
      </tr>
      <tr>
        <td>(Optional) <code>memory</code></td>
        <td>
          This sets the memory requests and limits for the RabbitMQ containers. The default values for both
          requests and limits are 2Gi.<br><br>
          The RabbitMQ high-water mark is set to 0.4 times the memory limit. Pivotal recommends keeping the
          requests and limits as the same value.
        </td>
      </tr>
    </table>
