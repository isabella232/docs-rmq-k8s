---
title: Monitoring Pivotal RabbitMQ for Kubernetes
owner: RMQ for k8s
---

<strong><%= modified_date %></strong>

This topic describes how to monitor <%= vars.product_full %>.

## <a id='overview'></a> Overview

RabbitMQ v3.8 and later deploys with the `rabbitmq_prometheus` plugin. This enables a Prometheus deployment to
scrape metrics from the RabbitMQ cluster with minimal configuration.

[Prometheus](https://prometheus.io/) is a metrics database used in Kubernetes deployments.
Although Kubernetes can be configured with other monitoring methods, the Prometheus data model, service discovery
capability, and modular architecture make Prometheus especially well suited to monitoring cloud-native apps and
infrastructure.

Follow the steps in one of the two procedures below to deploy Prometheus:

* <a id='kube-prom'></a> Deploy Prometheus with `kube-prometheus`
* <a id='scrape'></a> Deploy Prometheus with Scraping Annotations

Alternatively, you can deploy your own Grafana resources separately for monitoring.
To do so, follow the steps in [Monitor Dashboards with Grafana](#grafana) below.

## <a id='kube-prom'></a> Monitor RabbitMQ Using Prometheus Deployed with kube-prometheus

The `kube-prometheus` project provides manifests for a metrics stack within your Kubernetes cluster, including
operators for Prometheus, Alert Manager, and Grafana.

For more information, see the [kube-prometheus project GitHub repository](https://github.com/coreos/kube-prometheus)
and the [kube-prometheus installation guide](https://github.com/coreos/kube-prometheus#quickstart) in GitHub.

Each `RabbitmqCluster` requires a `ServiceMonitor` custom resource to be deployed in its namespace.
This resource targets the `RabbitmqCluster` through a selector.

For more information about selectors, see the
[Kubernetes documentation](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors).

To deploy Prometheus with `kube-prometheus`:

1. Display your `RabbitmqCluster` labels by running:

    ```
    kubectl get service CLUSTER-ingress --show-labels
    ```

    Where `CLUSTER` is the name of your cluster.

    For example, if your cluster name is `rabbitmq-1` the command is:

    <pre class="terminal">
      kubectl get service rabbitmq-1-ingress --show-labels`.
    </pre>

1. Copy the labels.

1. Paste the labels inside the `selector.matchLabels` section of the `ServiceMonitor` manifest.

    For example:

    ```
    apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    metadata:
      name: rabbitmq-1
      namespace: rabbitmq-1
      spec:
      endpoints:
      - interval: 15s
        port: https
      selector:
        matchLabels:
          app: rabbitmq-1
    ```

## <a id='scrape'></a> Monitor RabbitMQ Using Prometheus with Scraping Annotations

Before you can deploy Prometheus manually, several resources are required for Prometheus to begin scraping
metrics from your RabbitMQ cluster:

* A `ClusterRole` permitting `get` access to the `/metrics` endpoint, as seen in the `ClusterRole` manifest
snippet below.

    ```
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: prometheus
    rules:
    - nonResourceURLs:
      - /metrics
      verbs:
      - get
    ```

* A `ClusterRoleBinding` linking the `ClusterRole` to your Prometheus deployment’s `ServiceAccount`, as seen
in the `ClusterRoleBinding` manifest snippet below.

    ```
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: prometheus
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: prometheus
    subjects:
    - kind: ServiceAccount
      name: prometheus
      namespace: monitoring
    ```

    <p class="note">
      <strong>Note:</strong> You could bind <code>ClusterRole</code> to the default <code>ServiceAccount</code>
      in the Prometheus deployment’s namespace instead. However, for greater security, Pivotal recommends you
      create a dedicated <code>ServiceAccount</code> for your deployment.
    </p>

To monitor a new `RabbitmqCluster`:

1. Add Prometheus annotations to your `RabbitmqCluster` manifest.

    An example of a `RabbitmqCluster` with annotations:

    ```
    apiVersion: rabbitmq.pivotal.io/v1beta1
    kind: RabbitmqCluster
    metadata:
      name: rabbitmq-1
    spec:
      service:
        annotations:
          "prometheus.io/scrape": "true"
          "prometheus.io/port": "15692"
    ```

To monitor an existing `RabbitmqCluster`:

1. Add the following annotations to the `metadata` section of the ingress service manifest.

    For example:

    ```
    metadata:
       annotations:
          "prometheus.io/scrape": "true"
          "prometheus.io/port": "15692"
    ```

## <a id='grafana'></a> Monitor Dashboards with Grafana

If you do not deploy with Prometheus, you need to deploy your own Grafana resources separately.
RabbitMQ provides Grafana dashboards that integrate the scraped Prometheus metrics.
To deploy your own Grafana resources:

1. Go to the [Grafana website](https://grafana.com/orgs/rabbitmq) to view the list of official RabbitMQ Grafana
dashboards.
1. Click on the dashboard you want to use.
1. Click the **Download JSON** link.
1. Follow the steps in the [Grafana documentation](https://grafana.com/docs/reference/export_import/#importing-a-dashboard) to import your chosen dashboard into Grafana.
