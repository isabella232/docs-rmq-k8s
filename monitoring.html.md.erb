---
title: Monitoring Pivotal RabbitMQ for Kubernetes
owner: RMQ for k8s
---

<strong><%= modified_date %></strong>

This topic describes how to monitor <%= vars.product_full %>.

## <a id='overview'></a> Overview

RabbitMQ for Kubernetes deploys RabbitMQ clusters with `rabbitmq_prometheus` plugin enabled by default.
This plugin exposes a Prometheus-compatible metrics endpoint. Some other monitoring tools
also support Prometheus endpoints but in this document we focus on configuring [Prometheus](https://prometheus.io/) to scrape these endpoints
and [Grafana](https://grafana.com/) to visualize data stored in Prometheus.

Prometheus is often configured to automatically scrape any pod with `prometheus.io/scrape: true` annotation. If you have configured Prometheus like that
then follow the process explained in [Monitor RabbitMQ Using Prometheus and Scraping Annotations](#prom-annotations).

Another popular approach is to use [Prometheus Operator](https://github.com/coreos/prometheus-operator). Prometheus Operator ignores the annotations
in favour of a more flexible custom resource called `ServiceMonitor` to define scraping configuration. If you are using Prometheus Operator
(eg. deployed using [kube-prometheus](https://github.com/coreos/kube-prometheus/)), go to [Monitor RabbitMQ Using Prometheus Operator](#prom-operator).

If you are not sure, you can run:

  ```
  kubectl get customresourcedefinitions.apiextensions.k8s.io servicemonitors.monitoring.coreos.com
  ```

If this command returns an error, that means you do not have Prometheus Operator deployed.

## <a id='prom-annotations'></a> Monitor RabbitMQ Using Prometheus and Scraping Annotations

If you have configured Prometheus to automatically scrape all pods with `prometheus.io/scrape: true` annotation then most likely you don't have to do anything special to start monitoring your RabbitMQ clusters.
RabbitMQ for Kubernetes configures these annotation by default. You can verify that by running:

    ```
    kubectl get -o yaml service INSTANCE-rabbitmq-ingress
    ```

You should see the annotations in the `spec.service` part of the output:

    ```
    apiVersion: rabbitmq.pivotal.io/v1beta1
    kind: RabbitmqCluster
    metadata:
      name: INSTANCE
    spec:
      service:
        annotations:
          "prometheus.io/scrape": "true"
          "prometheus.io/port": "15692"
    ```

Once Prometheus successfully scrapes RabbitMQ clusters, you can go to Grafana to [import the dashboards](#grafana).

## <a id='prom-operator'></a> Monitor RabbitMQ Using Prometheus Operator

When using Prometheus Operator, you have to create a `ServiceMonitor` resource to configure automatic discovery of RabbitMQ clusters.

To monitor RabbitMQ using Prometheus Operator:

1. Create a YAML file `rabbitmq-servicemonitor.yaml` with the following contents:

    ```
    apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    metadata:
      name: rabbitmq
    spec:
      endpoints:
      - interval: 15s
        port: prometheus
      selector:
        matchLabels:
          app.kubernetes.io/component: rabbitmq
      namespaceSelector:
        any: true
    ```
  
1. Create the ServiceMonitor resource by running:

  ```
  kubectl apply -f rabbitmq-servicemonitor.yaml
  ```

This resource can be created in any namespace, as long as Prometheus Operator has permissions to find it. If your RabbitMQ clusters don't appear in Prometheus,
you may need to [configure permissions for Prometheus Operator](https://github.com/coreos/prometheus-operator/blob/master/Documentation/rbac.md). For example, the following
steps should work if you deployed Prometheus Operator using [kube-prometheus](https://github.com/coreos/kube-prometheus).
  
1. Create `prometheus-roles.yaml` with the following contents:

  ```
    apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: ClusterRole
    metadata:
      name: prometheus
    rules:
    - apiGroups: [""]
      resources:
      - nodes
      - services
      - endpoints
      - pods
      verbs: ["get", "list", "watch"]
    - apiGroups: [""]
      resources:
      - configmaps
      verbs: ["get"]
    - nonResourceURLs: ["/metrics"]
      verbs: ["get"]
    ---
    apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: ClusterRoleBinding
    metadata:
      name: prometheus
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: prometheus
    subjects:
    - kind: ServiceAccount
      name: prometheus-k8s
      namespace: monitoring
  ```
1. Apply these permissions by running:

  ```
  kubectl apply -f prometheus-roles.yaml
  ```

Once Prometheus successfully scrapes RabbitMQ clusters, you can go to Grafana to [import the dashboards](#grafana).

## <a id='grafana'></a> Import Dashboards to Grafana

RabbitMQ provides Grafana dashboards to visualize the metrics scraped by Prometheus.

To import dashboard to Grafana:

1. Go to the [Grafana website](https://grafana.com/orgs/rabbitmq) to view the list of official RabbitMQ Grafana
dashboards.
1. Click on the dashboard you want to use.
1. Click the **Download JSON** link or copy the dashboard ID.
1. Follow the steps in the [Grafana documentation](https://grafana.com/docs/reference/export_import/#importing-a-dashboard) to import your chosen dashboard into Grafana.
